### YamlMime:UniversalReference
ms.openlocfilehash: 3fa73e6b39aa13478c9ab2e98f6d062ffddb3ae7
ms.sourcegitcommit: 0e294f7c4dcdfae9df18ff3e82b6563680ef2519
ms.translationtype: MT
ms.contentlocale: es-ES
ms.lasthandoff: 01/25/2019
ms.locfileid: "55057746"
items:
- uid: azure-iothub.Client
  name: Client
  fullName: Client
  children:
  - azure-iothub.Client.close_1
  - azure-iothub.Client.close
  - azure-iothub.Client.fromConnectionString
  - azure-iothub.Client.fromSharedAccessSignature
  - azure-iothub.Client.getFeedbackReceiver_1
  - azure-iothub.Client.getFeedbackReceiver
  - azure-iothub.Client.getFileNotificationReceiver_1
  - azure-iothub.Client.getFileNotificationReceiver
  - azure-iothub.Client.invokeDeviceMethod_2
  - azure-iothub.Client.invokeDeviceMethod
  - azure-iothub.Client.invokeDeviceMethod_3
  - azure-iothub.Client.invokeDeviceMethod_1
  - azure-iothub.Client.open_1
  - azure-iothub.Client.open
  - azure-iothub.Client.send_1
  - azure-iothub.Client.send
  - azure-iothub.Client.ServiceReceiver
  - azure-iothub.Client.setRetryPolicy
  - azure-iothub.Client.Transport
  - azure-iothub.Client.TransportConfigOptions
  - azure-iothub.Client.TransportCtor
  langs:
  - typeScript
  type: class
  summary: >
    El cliente del servicio IoT Hub se utiliza para comunicarse con dispositivos a través de un centro de IoT de Azure.

    Permite que el usuario SDK:
      - enviar el dispositivo a nube (también conocido como comandos) a los dispositivos: los comandos están en cola en IoT Hub y entregados de forma asincrónica solo cuando el dispositivo está conectado. Solo 50 comandos se pueden poner en cola por dispositivo.
      - invocar métodos directos en dispositivos (que sólo funcionará si el dispositivo está conectado actualmente: es una manera sincrónica de la comunicación con el dispositivo)
      - escuchar mensajes de comentarios enviados por los dispositivos para los comandos anteriores.
      - escuchar las notificaciones de carga de archivos desde dispositivos.
    Los usuarios deben crear nuevos <xref:azure-iothub.Client> instancias llamando a uno de los métodos de fábrica, [fromConnectionString](xref:azure-iothub.Client.fromConnectionString) o [fromSharedAccessSignature](xref:azure-iothub.Client.fromSharedAccessSignature), para crear un cliente de servicio de IoT Hub.
  extends:
    name: azure-iothub.Client
  package: azure-iothub
- uid: azure-iothub.Client.close_1
  name: close()
  children: []
  type: method
  langs:
  - typeScript
  summary: Cierra la conexión a IoT hub.
  syntax:
    content: function close()
    parameters: []
    return:
      type:
      - Promise<azure-iothub.ResultWithIncomingMessage<Disconnected>>
  package: azure-iothub
- uid: azure-iothub.Client.close
  name: close(IncomingMessageCallback<Disconnected>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Cierra la conexión a IoT hub.
  syntax:
    content: 'function close(done: IncomingMessageCallback<Disconnected>)'
    parameters:
    - id: done
      type:
      - azure-iothub.IncomingMessageCallback<Disconnected>
      description: ''
  package: azure-iothub
- uid: azure-iothub.Client.fromConnectionString
  name: fromConnectionString(string, Client.TransportCtor)
  children: []
  type: method
  langs:
  - typeScript
  summary: Crea a un cliente del servicio IoT Hub de la cadena de conexión determinado mediante el transporte predeterminado (Amqp) o el especificado en el segundo argumento.
  syntax:
    content: 'static function fromConnectionString(connStr: string, transportCtor?: Client.TransportCtor)'
    parameters:
    - id: connStr
      type:
      - string
      description: Una cadena de conexión que encapsula permisos de "conexión de dispositivo" en un centro de IoT.
    - id: transportCtor
      type:
      - azure-iothub.Client.Client.TransportCtor
      description: ''
      optional: true
    return:
      type:
      - azure-iothub.Client
  package: azure-iothub
- uid: azure-iothub.Client.fromSharedAccessSignature
  name: fromSharedAccessSignature(string, Client.TransportCtor)
  children: []
  type: method
  langs:
  - typeScript
  summary: Crea a un cliente del servicio IoT Hub de la firma de acceso compartido determinado mediante el transporte predeterminado (Amqp) o con el especificado en el segundo argumento.
  syntax:
    content: 'static function fromSharedAccessSignature(sharedAccessSignature: string, transportCtor?: Client.TransportCtor)'
    parameters:
    - id: sharedAccessSignature
      type:
      - string
      description: Una firma de acceso compartido que encapsula permisos de "conexión de servicio" en un centro de IoT.
    - id: transportCtor
      type:
      - azure-iothub.Client.Client.TransportCtor
      description: ''
      optional: true
    return:
      type:
      - azure-iothub.Client
  package: azure-iothub
- uid: azure-iothub.Client.getFeedbackReceiver_1
  name: getFeedbackReceiver()
  children: []
  type: method
  langs:
  - typeScript
  summary: Devuelve un objeto AmqpReceiver que emite eventos cuando se reciben nuevos mensajes de comentarios por el cliente.
  syntax:
    content: function getFeedbackReceiver()
    parameters: []
    return:
      type:
      - Promise<azure-iothub.ResultWithIncomingMessage<azure-iothub.Client.ServiceReceiver>>
  package: azure-iothub
- uid: azure-iothub.Client.getFeedbackReceiver
  name: getFeedbackReceiver(IncomingMessageCallback<ServiceReceiver>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Devuelve un objeto AmqpReceiver que emite eventos cuando se reciben nuevos mensajes de comentarios por el cliente.
  syntax:
    content: 'function getFeedbackReceiver(done: IncomingMessageCallback<ServiceReceiver>)'
    parameters:
    - id: done
      type:
      - azure-iothub.IncomingMessageCallback<azure-iothub.Client.ServiceReceiver>
      description: ''
  package: azure-iothub
- uid: azure-iothub.Client.getFileNotificationReceiver_1
  name: getFileNotificationReceiver()
  children: []
  type: method
  langs:
  - typeScript
  summary: Devuelve un objeto AmqpReceiver que emite eventos cuando se reciben nuevas notificaciones de carga de archivo por el cliente.
  syntax:
    content: function getFileNotificationReceiver()
    parameters: []
    return:
      type:
      - Promise<azure-iothub.ResultWithIncomingMessage<azure-iothub.Client.ServiceReceiver>>
  package: azure-iothub
- uid: azure-iothub.Client.getFileNotificationReceiver
  name: getFileNotificationReceiver(IncomingMessageCallback<ServiceReceiver>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Devuelve un objeto AmqpReceiver que emite eventos cuando se reciben nuevas notificaciones de carga de archivo por el cliente.
  syntax:
    content: 'function getFileNotificationReceiver(done: IncomingMessageCallback<ServiceReceiver>)'
    parameters:
    - id: done
      type:
      - azure-iothub.IncomingMessageCallback<azure-iothub.Client.ServiceReceiver>
      description: ''
  package: azure-iothub
- uid: azure-iothub.Client.invokeDeviceMethod_2
  name: invokeDeviceMethod(string, DeviceMethodParams)
  children: []
  type: method
  langs:
  - typeScript
  summary: Invoca un método en un determinado dispositivo o módulo.
  syntax:
    content: 'function invokeDeviceMethod(deviceId: string, methodParams: DeviceMethodParams)'
    parameters:
    - id: deviceId
      type:
      - string
      description: ''
    - id: methodParams
      type:
      - azure-iothub.DeviceMethodParams
      description: ''
    return:
      type:
      - Promise<azure-iothub.ResultWithIncomingMessage<any>>
  package: azure-iothub
- uid: azure-iothub.Client.invokeDeviceMethod
  name: invokeDeviceMethod(string, DeviceMethodParams, IncomingMessageCallback<any>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Invoca un método en un determinado dispositivo o módulo.
  syntax:
    content: 'function invokeDeviceMethod(deviceId: string, methodParams: DeviceMethodParams, done?: IncomingMessageCallback<any>)'
    parameters:
    - id: deviceId
      type:
      - string
      description: El identificador de una identidad de dispositivo existente.
    - id: methodParams
      type:
      - azure-iothub.DeviceMethodParams
      description: ''
    - id: done
      type:
      - azure-iothub.IncomingMessageCallback<any>
      description: ''
      optional: true
  package: azure-iothub
- uid: azure-iothub.Client.invokeDeviceMethod_3
  name: invokeDeviceMethod(string, string, DeviceMethodParams)
  children: []
  type: method
  langs:
  - typeScript
  summary: Invoca un método en un determinado dispositivo o módulo.
  syntax:
    content: 'function invokeDeviceMethod(deviceId: string, moduleId: string, methodParams: DeviceMethodParams)'
    parameters:
    - id: deviceId
      type:
      - string
      description: ''
    - id: moduleId
      type:
      - string
      description: ''
    - id: methodParams
      type:
      - azure-iothub.DeviceMethodParams
      description: ''
    return:
      type:
      - Promise<azure-iothub.ResultWithIncomingMessage<any>>
  package: azure-iothub
- uid: azure-iothub.Client.invokeDeviceMethod_1
  name: invokeDeviceMethod(string, string, DeviceMethodParams, IncomingMessageCallback<any>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Invoca un método en un determinado dispositivo o módulo.
  syntax:
    content: 'function invokeDeviceMethod(deviceId: string, moduleId: string, methodParams: DeviceMethodParams, done?: IncomingMessageCallback<any>)'
    parameters:
    - id: deviceId
      type:
      - string
      description: ''
    - id: moduleId
      type:
      - string
      description: ''
    - id: methodParams
      type:
      - azure-iothub.DeviceMethodParams
      description: ''
    - id: done
      type:
      - azure-iothub.IncomingMessageCallback<any>
      description: ''
      optional: true
  package: azure-iothub
- uid: azure-iothub.Client.open_1
  name: open()
  children: []
  type: method
  langs:
  - typeScript
  summary: Se abre la conexión a IoT hub.
  syntax:
    content: function open()
    parameters: []
    return:
      type:
      - Promise<azure-iothub.ResultWithIncomingMessage<Connected>>
  package: azure-iothub
- uid: azure-iothub.Client.open
  name: open(IncomingMessageCallback<Connected>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Se abre la conexión a IoT hub.
  syntax:
    content: 'function open(done: IncomingMessageCallback<Connected>)'
    parameters:
    - id: done
      type:
      - azure-iothub.IncomingMessageCallback<Connected>
      description: ''
  package: azure-iothub
- uid: azure-iothub.Client.send_1
  name: send(string, Message | Message.BufferConvertible)
  children: []
  type: method
  langs:
  - typeScript
  summary: Envía un mensaje a un dispositivo.
  syntax:
    content: 'function send(deviceId: string, message: Message | Message.BufferConvertible)'
    parameters:
    - id: deviceId
      type:
      - string
      description: ''
    - id: message
      type:
      - Message | Message.BufferConvertible
      description: ''
    return:
      type:
      - Promise<azure-iothub.ResultWithIncomingMessage<MessageEnqueued>>
  package: azure-iothub
- uid: azure-iothub.Client.send
  name: send(string, Message | Message.BufferConvertible, IncomingMessageCallback<MessageEnqueued>)
  children: []
  type: method
  langs:
  - typeScript
  summary: Envía un mensaje a un dispositivo.
  syntax:
    content: 'function send(deviceId: string, message: Message | Message.BufferConvertible, done: IncomingMessageCallback<MessageEnqueued>)'
    parameters:
    - id: deviceId
      type:
      - string
      description: El identificador de una identidad de dispositivo existente.
    - id: message
      type:
      - Message | Message.BufferConvertible
      description: >-
        Cuerpo del mensaje que se enviará al dispositivo.

        Si `message` no es de tipo [mensaje](xref:azure-iot-common.Message), se convertirá.
    - id: done
      type:
      - azure-iothub.IncomingMessageCallback<MessageEnqueued>
      description: ''
  package: azure-iothub
- uid: azure-iothub.Client.setRetryPolicy
  name: setRetryPolicy(RetryPolicy)
  children: []
  type: method
  langs:
  - typeScript
  summary: Establecer la directiva utilizada por el cliente para volver a intentar las operaciones de red.
  syntax:
    content: 'function setRetryPolicy(policy: RetryPolicy)'
    parameters:
    - id: policy
      type:
      - RetryPolicy
      description: >
        directiva utilizada para reintentar las operaciones (p ej. Abrir, enviar, etcetera.).

        El SDK incluye 2 directivas "integradas": ExponentialBackoffWithJitter (valor predeterminado) y NoRetry (para cancelar cualquier forma de reintento). El usuario también puede pasar su propio objeto siempre que lo implemente 2 métodos:-shouldRetry(err: Error): booleano: indica si se debe reintentar una operación en función del tipo de error - nextRetryTimeout (retryCount: número de limitado: un valor booleano): número: devuelve el tiempo de espera (en milisegundos) antes de volver a intentar en función del número de intentos (últimos retryCount) y el hecho de que el error es un error de limitación o no.
  package: azure-iothub
references:
- uid: azure-iothub.Client
  name: Client
  spec.typeScript:
  - name: Client
    fullName: Client
    uid: azure-iothub.Client
- uid: Callback<azure-iothub.Client.ServiceReceiver>
  name: ServiceReceiver>
  spec.typeScript:
  - name: Callback<
    fullName: Callback<
  - name: ServiceReceiver
    fullName: ServiceReceiver
    uid: azure-iothub.Client.ServiceReceiver
  - name: '>'
    fullName: '>'
- uid: azure-iothub.IncomingMessageCallback<Disconnected>
  name: IncomingMessageCallback<Disconnected>
  spec.typeScript:
  - name: IncomingMessageCallback
    fullName: IncomingMessageCallback
    uid: azure-iothub.IncomingMessageCallback
  - name: <Disconnected>
    fullName: <Disconnected>
- uid: Promise<azure-iothub.ResultWithIncomingMessage<Disconnected>>
  name: ResultWithIncomingMessage<Disconnected>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ResultWithIncomingMessage
    fullName: ResultWithIncomingMessage
    uid: azure-iothub.ResultWithIncomingMessage
  - name: <Disconnected>>
    fullName: <Disconnected>>
- uid: azure-iothub.IncomingMessageCallback<azure-iothub.Client.ServiceReceiver>
  name: ServiceReceiver>
  spec.typeScript:
  - name: IncomingMessageCallback
    fullName: IncomingMessageCallback
    uid: azure-iothub.IncomingMessageCallback
  - name: <
    fullName: <
  - name: ServiceReceiver
    fullName: ServiceReceiver
    uid: azure-iothub.Client.ServiceReceiver
  - name: '>'
    fullName: '>'
- uid: Promise<azure-iothub.ResultWithIncomingMessage<azure-iothub.Client.ServiceReceiver>>
  name: ServiceReceiver>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ResultWithIncomingMessage
    fullName: ResultWithIncomingMessage
    uid: azure-iothub.ResultWithIncomingMessage
  - name: <
    fullName: <
  - name: ServiceReceiver
    fullName: ServiceReceiver
    uid: azure-iothub.Client.ServiceReceiver
  - name: '>>'
    fullName: '>>'
- uid: azure-iothub.DeviceMethodParams
  name: DeviceMethodParams
  spec.typeScript:
  - name: DeviceMethodParams
    fullName: DeviceMethodParams
    uid: azure-iothub.DeviceMethodParams
- uid: azure-iothub.IncomingMessageCallback<any>
  name: IncomingMessageCallback<any>
  spec.typeScript:
  - name: IncomingMessageCallback
    fullName: IncomingMessageCallback
    uid: azure-iothub.IncomingMessageCallback
  - name: <any>
    fullName: <any>
- uid: Promise<azure-iothub.ResultWithIncomingMessage<any>>
  name: ResultWithIncomingMessage<any>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ResultWithIncomingMessage
    fullName: ResultWithIncomingMessage
    uid: azure-iothub.ResultWithIncomingMessage
  - name: <any>>
    fullName: <any>>
- uid: azure-iothub.IncomingMessageCallback<Connected>
  name: IncomingMessageCallback<Connected>
  spec.typeScript:
  - name: IncomingMessageCallback
    fullName: IncomingMessageCallback
    uid: azure-iothub.IncomingMessageCallback
  - name: <Connected>
    fullName: <Connected>
- uid: Promise<azure-iothub.ResultWithIncomingMessage<Connected>>
  name: ResultWithIncomingMessage<Connected>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ResultWithIncomingMessage
    fullName: ResultWithIncomingMessage
    uid: azure-iothub.ResultWithIncomingMessage
  - name: <Connected>>
    fullName: <Connected>>
- uid: azure-iothub.IncomingMessageCallback<MessageEnqueued>
  name: IncomingMessageCallback<MessageEnqueued>
  spec.typeScript:
  - name: IncomingMessageCallback
    fullName: IncomingMessageCallback
    uid: azure-iothub.IncomingMessageCallback
  - name: <MessageEnqueued>
    fullName: <MessageEnqueued>
- uid: Promise<azure-iothub.ResultWithIncomingMessage<MessageEnqueued>>
  name: ResultWithIncomingMessage<MessageEnqueued>>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ResultWithIncomingMessage
    fullName: ResultWithIncomingMessage
    uid: azure-iothub.ResultWithIncomingMessage
  - name: <MessageEnqueued>>
    fullName: <MessageEnqueued>>
- uid: azure-iothub.Client.Client.TransportCtor
  name: TransportCtor
  spec.typeScript:
  - name: TransportCtor
    fullName: TransportCtor
    uid: azure-iothub.Client.Client.TransportCtor
- uid: azure-iothub.Client.ServiceReceiver
  name: ServiceReceiver
- uid: azure-iothub.Client.Transport
  name: Transport
- uid: azure-iothub.Client.TransportConfigOptions
  name: TransportConfigOptions
- uid: azure-iothub.Client.TransportCtor
  name: TransportCtor

### YamlMime:UniversalReference
ms.openlocfilehash: a00377b11a0a4f5c6d2453d40f079b28cb2f6aff
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: es-ES
ms.lasthandoff: 12/13/2018
ms.locfileid: "52121123"
items:
- uid: '@azure/event-processor-host.CheckpointManager'
  name: CheckpointManager
  fullName: CheckpointManager
  children:
  - '@azure/event-processor-host.CheckpointManager.checkpointStoreExists'
  - '@azure/event-processor-host.CheckpointManager.createAllCheckpointsIfNotExists'
  - '@azure/event-processor-host.CheckpointManager.createCheckpointStoreIfNotExists'
  - '@azure/event-processor-host.CheckpointManager.deleteCheckpoint'
  - '@azure/event-processor-host.CheckpointManager.deleteCheckpointStore'
  - '@azure/event-processor-host.CheckpointManager.getCheckpoint'
  - '@azure/event-processor-host.CheckpointManager.updateCheckpoint'
  langs:
  - typeScript
  type: interface
  summary: ''
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.checkpointStoreExists'
  name: checkpointStoreExists()
  children: []
  type: method
  langs:
  - typeScript
  summary: ¿Existe el almacén de punto de control?
  syntax:
    content: function checkpointStoreExists()
    parameters: []
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.createAllCheckpointsIfNotExists'
  name: createAllCheckpointsIfNotExists(string[])
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Crea el punto de comprobación los titulares de las particiones determinadas. No hace nada para cualquier punto de control de los titulares de que ya existen.

    La semántica de esto es complicada porque es posible usar el mismo almacén para las concesiones y puntos de control (la implementación de Azure Storage no lo) y es necesario tener una concesión para cada partición, pero no es necesario tener un punto de control para una partición.

    Es un escenario válido utilizar nunca puntos de control, por lo que es importante para la tienda distinguir entre la creación de la estructura que contenga un punto de control y crear realmente un punto de control (que almacena un par de números de secuencia o de desplazamiento en la estructura).
  syntax:
    content: 'function createAllCheckpointsIfNotExists(partitionIds: string[])'
    parameters:
    - id: partitionIds
      type:
      - string[]
      description: Lista de particiones para crear marcadores de punto de comprobación para.
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.createCheckpointStoreIfNotExists'
  name: createCheckpointStoreIfNotExists()
  children: []
  type: method
  langs:
  - typeScript
  summary: Crear el almacén de punto de comprobación si no existe. No hace nada si existe.
  syntax:
    content: function createCheckpointStoreIfNotExists()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.deleteCheckpoint'
  name: deleteCheckpoint(string)
  children: []
  type: method
  langs:
  - typeScript
  summary: Eliminar el punto de control almacenado para la partición especificada. Si no hay ningún punto de control almacenado para la partición especificada, que se trata como correcta. Eliminando el punto de control titular está permitido pero no es necesario; la implementación está libre para hacer que sea más cómodo.
  syntax:
    content: 'function deleteCheckpoint(partitionId: string)'
    parameters:
    - id: partitionId
      type:
      - string
      description: El valor de partitionId para eliminar el punto de control de la tienda.
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.deleteCheckpointStore'
  name: deleteCheckpointStore()
  children: []
  type: method
  langs:
  - typeScript
  summary: Elimina el almacén de punto de comprobación.
  syntax:
    content: function deleteCheckpointStore()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.getCheckpoint'
  name: getCheckpoint(string)
  children: []
  type: method
  langs:
  - typeScript
  summary: Obtiene la información de punto de control asociada con la partición especificada. Podría devolver indefinido si no se ha creado ningún punto de comprobación para esa partición.
  syntax:
    content: 'function getCheckpoint(partitionId: string)'
    parameters:
    - id: partitionId
      type:
      - string
      description: El valor de partitionId para obtener la información de punto de comprobación de.
    return:
      type:
      - Promise<@azure/event-processor-host.CheckpointInfo | undefined>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.CheckpointManager.updateCheckpoint'
  name: updateCheckpoint(CompleteLease, CheckpointInfo)
  children: []
  type: method
  langs:
  - typeScript
  summary: Actualice el punto de control en el almacén con el desplazamiento/sequenceNumber en el punto de control proporcionado.
  syntax:
    content: 'function updateCheckpoint(lease: CompleteLease, checkpoint: CheckpointInfo)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: Información de la partición en la que se va a realizar un punto de control.
    - id: checkpoint
      type:
      - '@azure/event-processor-host.CheckpointInfo'
      description: desplazamiento/sequeceNumber para actualizar el almacén con
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
references:
- uid: Promise<@azure/event-processor-host.CheckpointInfo | undefined>
  name: CheckpointInfo | undefined>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: CheckpointInfo
    fullName: CheckpointInfo
    uid: '@azure/event-processor-host.CheckpointInfo'
  - name: " | undefined>"
    fullName: " | undefined>"
- uid: '@azure/event-processor-host.CompleteLease'
  name: CompleteLease
  spec.typeScript:
  - name: CompleteLease
    fullName: CompleteLease
    uid: '@azure/event-processor-host.CompleteLease'
- uid: '@azure/event-processor-host.CheckpointInfo'
  name: CheckpointInfo
  spec.typeScript:
  - name: CheckpointInfo
    fullName: CheckpointInfo
    uid: '@azure/event-processor-host.CheckpointInfo'

### YamlMime:UniversalReference
ms.openlocfilehash: ed7f92526f273477e153fad3fe0ab03db0704f34
ms.sourcegitcommit: efa2d98deffe8a0d41a8d63f9f07aa720862e6ab
ms.translationtype: MT
ms.contentlocale: es-ES
ms.lasthandoff: 12/13/2018
ms.locfileid: "52104230"
items:
- uid: '@azure/event-processor-host.LeaseManager'
  name: LeaseManager
  fullName: LeaseManager
  children:
  - '@azure/event-processor-host.LeaseManager.acquireLease'
  - '@azure/event-processor-host.LeaseManager.createAllLeasesIfNotExists'
  - '@azure/event-processor-host.LeaseManager.createLeaseStoreIfNotExists'
  - '@azure/event-processor-host.LeaseManager.deleteLease'
  - '@azure/event-processor-host.LeaseManager.deleteLeaseStore'
  - '@azure/event-processor-host.LeaseManager.getAllLeases'
  - '@azure/event-processor-host.LeaseManager.getLease'
  - '@azure/event-processor-host.LeaseManager.leaseDuration'
  - '@azure/event-processor-host.LeaseManager.leaseRenewInterval'
  - '@azure/event-processor-host.LeaseManager.leaseStoreExists'
  - '@azure/event-processor-host.LeaseManager.releaseLease'
  - '@azure/event-processor-host.LeaseManager.renewLease'
  - '@azure/event-processor-host.LeaseManager.updateLease'
  langs:
  - typeScript
  type: interface
  summary: ''
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.acquireLease'
  name: acquireLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="282eb-101">Adquirir la concesión de la partición que desee para este EventProcessorHost.</span><span class="sxs-lookup"><span data-stu-id="282eb-101">Acquire the lease on the desired partition for this EventProcessorHost.</span></span>

    <span data-ttu-id="282eb-102">Tenga en cuenta que es legal para adquirir una concesión que ya pertenece a otro host.</span><span class="sxs-lookup"><span data-stu-id="282eb-102">Note that it is legal to acquire a lease that is already owned by another host.</span></span>

    <span data-ttu-id="282eb-103">Robo de concesión es cómo se redistribuyen particiones cuando se inician los hosts adicionales.</span><span class="sxs-lookup"><span data-stu-id="282eb-103">Lease-stealing is how partitions are redistributed when additional hosts are started.</span></span>


    <span data-ttu-id="282eb-104">La implementación existente de Azure Storage puede experimentar las carreras entre dos instancias de host intenta adquirir o robar la concesión al mismo tiempo.</span><span class="sxs-lookup"><span data-stu-id="282eb-104">The existing Azure Storage implementation can experience races between two host instances attempting to acquire or steal the lease at the same time.</span></span> <span data-ttu-id="282eb-105">Para evitar situaciones donde dos instancias de host tanto creen que poseen la concesión, adquisición puede producir un error sin errores devolviendo false y debe hacerlo si tiene alguna duda, la peor que puede ocurrir es ninguna instancia de host posee la concesión durante un breve período.</span><span class="sxs-lookup"><span data-stu-id="282eb-105">To avoid situations where two host instances both believe that they own the lease, acquisition can fail without errors by returning false and should do so when there is any doubt -- the worst that can happen is that no host instance owns the lease for a short time.</span></span> <span data-ttu-id="282eb-106">Esto difiere cualitativamente, por ejemplo, el almacén subyacente de producir una excepción de acceso, que es un error.</span><span class="sxs-lookup"><span data-stu-id="282eb-106">This is qualitatively different from, for example, the underlying store throwing an access exception, which is an error.</span></span>
  syntax:
    content: 'function acquireLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: <span data-ttu-id="282eb-107">Información de la partición que desee obtenida anteriormente de la concesión `getLease()`.</span><span class="sxs-lookup"><span data-stu-id="282eb-107">Lease info for the desired partition as previously obtained from `getLease()`.</span></span>
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.createAllLeasesIfNotExists'
  name: createAllLeasesIfNotExists(string[])
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="282eb-108">Crear en el almacén de información de la concesión para la partición especificada, si no existe.</span><span class="sxs-lookup"><span data-stu-id="282eb-108">Create in the store the lease info for the given partition, if it does not exist.</span></span> <span data-ttu-id="282eb-109">No hacer nada si existe ya en el almacén.</span><span class="sxs-lookup"><span data-stu-id="282eb-109">Do nothing if it does exist in the store already.</span></span>
  syntax:
    content: 'function createAllLeasesIfNotExists(partitionIds: string[])'
    parameters:
    - id: partitionIds
      type:
      - string[]
      description: <span data-ttu-id="282eb-110">Id. de particiones que se va a crear la información de concesión para</span><span class="sxs-lookup"><span data-stu-id="282eb-110">ids of partitions to create lease info for</span></span>
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.createLeaseStoreIfNotExists'
  name: createLeaseStoreIfNotExists()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="282eb-111">Crear el almacén de concesión si no existe.</span><span class="sxs-lookup"><span data-stu-id="282eb-111">Create the lease store if it doesn't exist.</span></span> <span data-ttu-id="282eb-112">No hacer nada si existe.</span><span class="sxs-lookup"><span data-stu-id="282eb-112">Do nothing if it does exist.</span></span>
  syntax:
    content: function createLeaseStoreIfNotExists()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.deleteLease'
  name: deleteLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="282eb-113">Eliminar la información de concesión de la partición especificada del almacén.</span><span class="sxs-lookup"><span data-stu-id="282eb-113">Delete the lease info for the given partition from the store.</span></span> <span data-ttu-id="282eb-114">Si no hay ninguna concesión almacenada para la partición especificada, que se trata como correcta.</span><span class="sxs-lookup"><span data-stu-id="282eb-114">If there is no stored lease for the given partition, that is treated as success.</span></span>
  syntax:
    content: 'function deleteLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: <span data-ttu-id="282eb-115">Información de la partición que desee obtenida anteriormente de la concesión `getLease()`.</span><span class="sxs-lookup"><span data-stu-id="282eb-115">Lease info for the desired partition as previously obtained from `getLease()`.</span></span>
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.deleteLeaseStore'
  name: deleteLeaseStore()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="282eb-116">Eliminar almacén de concesión.</span><span class="sxs-lookup"><span data-stu-id="282eb-116">Delete lease store.</span></span>
  syntax:
    content: function deleteLeaseStore()
    parameters: []
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.getAllLeases'
  name: getAllLeases()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="282eb-117">Devuelve BaseLease ligera para todas las concesiones, que incluye el nombre de propiedad de host y si concesión ha expirado.</span><span class="sxs-lookup"><span data-stu-id="282eb-117">Returns lightweight BaseLease for all leases, which includes name of owning host and whether lease is expired.</span></span> <span data-ttu-id="282eb-118">Una implementación es gratuita devolver CompleteLease o su propia clase derivada de CompleteLease, pero es importante que getAllLeases se ejecute tan rápido como sea posible.</span><span class="sxs-lookup"><span data-stu-id="282eb-118">An implementation is free to return CompleteLease or its own class derived from CompleteLease, but it is important that getAllLeases run as fast as possible.</span></span> <span data-ttu-id="282eb-119">Si es más rápido obtener únicamente la información necesaria para un BaseLease, principalmente se recomienda hacerlo.</span><span class="sxs-lookup"><span data-stu-id="282eb-119">If it is faster to obtain only the information required for a BaseLease, we heavily recommend doing that.</span></span>
  syntax:
    content: function getAllLeases()
    parameters: []
    return:
      type:
      - Promise<@azure/event-processor-host.BaseLease[]>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.getLease'
  name: getLease(string)
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="282eb-120">Obtiene la información de concesión para la partición especificada.</span><span class="sxs-lookup"><span data-stu-id="282eb-120">Gets the lease info for the specified partition.</span></span> <span data-ttu-id="282eb-121">Puede devolver `undefined` si no se ha creado ninguna concesión en el almacén para la partición especificada.</span><span class="sxs-lookup"><span data-stu-id="282eb-121">Can return `undefined` if no lease has been created in the store for the specified partition.</span></span>
  syntax:
    content: 'function getLease(partitionId: string)'
    parameters:
    - id: partitionId
      type:
      - string
      description: <span data-ttu-id="282eb-122">Id. de partición para obtener la concesión para.</span><span class="sxs-lookup"><span data-stu-id="282eb-122">Partition id to get the lease for.</span></span>
    return:
      type:
      - Promise<@azure/event-processor-host.CompleteLease | undefined>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.leaseDuration'
  name: leaseDuration
  fullName: leaseDuration
  children: []
  langs:
  - typeScript
  type: property
  summary: <span data-ttu-id="282eb-123">{number} leaseDuration duración de una concesión **en segundos** antes de que expire, a menos que se renueva.</span><span class="sxs-lookup"><span data-stu-id="282eb-123">{number} leaseDuration Duration of a lease **in seconds** before it expires unless renewed.</span></span>
  syntax:
    content: 'leaseDuration: number'
    return:
      type:
      - number
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.leaseRenewInterval'
  name: leaseRenewInterval
  fullName: leaseRenewInterval
  children: []
  langs:
  - typeScript
  type: property
  summary: >-
    <span data-ttu-id="282eb-124">{number} leaseRenewInterval el intervalo de suspensión **en segundos** entre análisis.</span><span class="sxs-lookup"><span data-stu-id="282eb-124">{number} leaseRenewInterval The sleep interval **in seconds** between scans.</span></span>


    <span data-ttu-id="282eb-125">Permite que una implementación de administrador de concesiones especificar con qué frecuencia debe buscar las concesiones y renovarlos PartitionManager.</span><span class="sxs-lookup"><span data-stu-id="282eb-125">Allows a lease manager implementation to specify to PartitionManager how often it should scan leases and renew them.</span></span> <span data-ttu-id="282eb-126">Para redistribuir las concesiones de manera oportuna después de un host deja de funcionar, se recomienda un intervalo relativamente corto, como los diez segundos.</span><span class="sxs-lookup"><span data-stu-id="282eb-126">In order to redistribute leases in a timely fashion after a host ceases operating, we recommend a relatively short interval, such as ten seconds.</span></span> <span data-ttu-id="282eb-127">Obviamente, debe ser menor que la mitad de la duración de concesión, para evitar la expiración accidental.</span><span class="sxs-lookup"><span data-stu-id="282eb-127">Obviously it should be less than half of the lease length, to prevent accidental expiration.</span></span>
  syntax:
    content: 'leaseRenewInterval: number'
    return:
      type:
      - number
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.leaseStoreExists'
  name: leaseStoreExists()
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="282eb-128">¿Existe el almacén de concesión?</span><span class="sxs-lookup"><span data-stu-id="282eb-128">Does the lease store exist?</span></span>
  syntax:
    content: function leaseStoreExists()
    parameters: []
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.releaseLease'
  name: releaseLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="282eb-129">Abandonar una concesión mantenida actualmente por este host.</span><span class="sxs-lookup"><span data-stu-id="282eb-129">Give up a lease currently held by this host.</span></span>

    <span data-ttu-id="282eb-130">Si la concesión se ha robado, o ha expirado, liberarla es innecesario y se producirá un error si intenta realizar.</span><span class="sxs-lookup"><span data-stu-id="282eb-130">If the lease has been stolen, or expired, releasing it is unnecessary, and will fail if attempted.</span></span>
  syntax:
    content: 'function releaseLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: <span data-ttu-id="282eb-131">Información de la partición que desee obtenida anteriormente de la concesión `getLease()`.</span><span class="sxs-lookup"><span data-stu-id="282eb-131">Lease info for the desired partition as previously obtained from `getLease()`.</span></span>
    return:
      type:
      - Promise<void>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.renewLease'
  name: renewLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="282eb-132">Renovar una concesión mantenida actualmente por este host.</span><span class="sxs-lookup"><span data-stu-id="282eb-132">Renew a lease currently held by this host.</span></span>

    <span data-ttu-id="282eb-133">Si la concesión se ha tomado por otra instancia de host (robado o tras la expiración) o liberar de forma explícita, renewLease debe devolver false.</span><span class="sxs-lookup"><span data-stu-id="282eb-133">If the lease has been taken by another host instance (either stolen or after expiration) or explicitly released, renewLease must return false.</span></span> <span data-ttu-id="282eb-134">Con la implementación basada en el almacenamiento de Azure, es posible renovar una concesión expirada que no ha tomado por otro host, por lo que la implementación que puede permitir o no, lo que sea conveniente.</span><span class="sxs-lookup"><span data-stu-id="282eb-134">With the Azure Storage-based implementation, it IS possible to renew an expired lease that has not been taken by another host, so your implementation can allow that or not, whichever is convenient.</span></span> <span data-ttu-id="282eb-135">Si no es así, renewLease debería devolver false.</span><span class="sxs-lookup"><span data-stu-id="282eb-135">If it does not, renewLease should return false.</span></span>
  syntax:
    content: 'function renewLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: <span data-ttu-id="282eb-136">concesión va a renovar.</span><span class="sxs-lookup"><span data-stu-id="282eb-136">lease to be renewed.</span></span>
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
- uid: '@azure/event-processor-host.LeaseManager.updateLease'
  name: updateLease(CompleteLease)
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="282eb-137">Actualizar el almacén con la información de la concesión proporcionada.</span><span class="sxs-lookup"><span data-stu-id="282eb-137">Update the store with the information in the provided lease.</span></span>

    <span data-ttu-id="282eb-138">Es necesario almacenar actualmente una concesión con el fin de actualizarlo.</span><span class="sxs-lookup"><span data-stu-id="282eb-138">It is necessary to currently hold a lease in order to update it.</span></span> <span data-ttu-id="282eb-139">Si la concesión que se ha robado o caducadas o publicada, no puede actualizarse.</span><span class="sxs-lookup"><span data-stu-id="282eb-139">If the lease has been stolen, or expired, or released, it cannot be updated.</span></span> <span data-ttu-id="282eb-140">Implementaciones del Administrador de concesiones deben renovar la concesión antes de realizar la actualización para evitar la expiración de concesión durante el proceso.</span><span class="sxs-lookup"><span data-stu-id="282eb-140">Lease manager implementations should renew the lease before performing the update to avoid lease expiration during the process.</span></span>
  syntax:
    content: 'function updateLease(lease: CompleteLease)'
    parameters:
    - id: lease
      type:
      - '@azure/event-processor-host.CompleteLease'
      description: <span data-ttu-id="282eb-141">Nueva información de concesión que se almacenará.</span><span class="sxs-lookup"><span data-stu-id="282eb-141">New lease information to be stored.</span></span>
    return:
      type:
      - Promise<boolean>
  package: '@azure/event-processor-host'
references:
- uid: '@azure/event-processor-host.CompleteLease'
  name: CompleteLease
  spec.typeScript:
  - name: CompleteLease
    fullName: CompleteLease
    uid: '@azure/event-processor-host.CompleteLease'
- uid: Promise<@azure/event-processor-host.BaseLease[]>
  name: BaseLease[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: BaseLease
    fullName: BaseLease
    uid: '@azure/event-processor-host.BaseLease'
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<@azure/event-processor-host.CompleteLease | undefined>
  name: CompleteLease | undefined>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: CompleteLease
    fullName: CompleteLease
    uid: '@azure/event-processor-host.CompleteLease'
  - name: " | undefined>"
    fullName: " | undefined>"

### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.SessionReceiver'
    name: SessionReceiver
    fullName: SessionReceiver
    children:
      - '@azure/service-bus.SessionReceiver.close'
      - '@azure/service-bus.SessionReceiver.getMessageIterator'
      - '@azure/service-bus.SessionReceiver.getState'
      - '@azure/service-bus.SessionReceiver.isClosed'
      - '@azure/service-bus.SessionReceiver.isReceivingMessages'
      - '@azure/service-bus.SessionReceiver.peek'
      - '@azure/service-bus.SessionReceiver.peekBySequenceNumber'
      - '@azure/service-bus.SessionReceiver.receiveDeferredMessage'
      - '@azure/service-bus.SessionReceiver.receiveDeferredMessages'
      - '@azure/service-bus.SessionReceiver.receiveMessages'
      - '@azure/service-bus.SessionReceiver.receiveMode'
      - '@azure/service-bus.SessionReceiver.registerMessageHandler'
      - '@azure/service-bus.SessionReceiver.renewSessionLock'
      - '@azure/service-bus.SessionReceiver.sessionId'
      - '@azure/service-bus.SessionReceiver.sessionLockedUntilUtc'
      - '@azure/service-bus.SessionReceiver.setState'
    langs:
      - typeScript
    type: class
    summary: |-
      La clase SessionReceiver puede utilizarse para recibir mensajes desde una sesión habilitada cola o suscripción en un lote o mediante el registro de controladores.
      Use el `createReceiver` funcionan en QueueClient o SubscriptionClient para crear instancias de un SessionReceiver.
      La clase SessionReceiver es una abstracción sobre el vínculo del receptor AMQP subyacente.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Cierra el vínculo del receptor AMQP subyacente.
      Una vez cerrado, el receptor no puede usarse para realizar más operaciones.
      Use el `createReceiver` funcionan en QueueClient o SubscriptionClient para crear instancias de un nuevo destinatario
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.getMessageIterator'
    name: getMessageIterator()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Obtiene un iterador de asincronía a través de mensajes desde el receptor.
      Produce un error si no hay otra operación de recepción en curso en el receptor del mismo. Si no está seguro de si hay otra ejecución de la operación de recepción, comprobar la `isReceivingMessages` propiedad en el receptor.

      Si el iterador no es capaz de capturar un nuevo mensaje en más de un minuto, `undefined` se devolverán
    syntax:
      content: function getMessageIterator()
      parameters: []
      return:
        type:
          - AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.getState'
    name: getState()
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Obtiene el estado de la sesión. Para obtener más información sobre los Estados de sesión, vea [estado de sesión](https://docs.microsoft.com/en-us/azure/service-bus-messaging/message-sessions#message-session-state)'
    syntax:
      content: function getState()
      parameters: []
      return:
        type:
          - Promise<any>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.isClosed'
    name: isClosed
    fullName: isClosed
    children: []
    langs:
      - typeScript
    type: property
    summary: Devuelve `true` si el receptor está cerrado. Esto puede ocurrir cualquiera se ha cerrado porque se ha cerrado el receptor de sí mismo o el cliente que creó.
    syntax:
      content: 'isClosed: boolean'
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.isReceivingMessages'
    name: isReceivingMessages()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Indica si el receptor está recibiendo actualmente mensajes o no.
      Cuando devuelve true, nuevo `registerMessageHandler()` o `receiveMessages()` no se pueden realizar llamadas.
    syntax:
      content: function isReceivingMessages()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.peek'
    name: peek(undefined | number)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Recupera el siguiente lote de mensajes activos (incluidos diferida, pero no deadlettered mensajes) en la sesión actual.
      - La primera llamada a `peek()` captura el primer mensaje activo. Cada llamada posterior realizada captura el mensaje subsiguiente.
      - A diferencia de un `received` mensaje, `peeked` mensaje es una versión de solo lectura del mensaje.
      No puede ser `Completed/Abandoned/Deferred/Deadlettered`. No se puede renovar el bloqueo en él.
    syntax:
      content: 'function peek(maxMessageCount?: undefined | number)'
      parameters:
        - id: maxMessageCount
          type:
            - undefined | number
          description: El número máximo de mensajes. Valor predeterminado `1`.
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.peekBySequenceNumber'
    name: 'peekBySequenceNumber(Long, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Busca el número deseado de mensajes activos (incluidos diferida, pero no los mensajes deadlettered) del número de secuencia especificado en la sesión actual.
      - A diferencia de un `received` mensaje, `peeked` mensaje es una versión de solo lectura del mensaje.
      No puede ser `Completed/Abandoned/Deferred/Deadlettered`. No se puede renovar el bloqueo en él.
    syntax:
      content: 'function peekBySequenceNumber(fromSequenceNumber: Long, maxMessageCount?: undefined | number)'
      parameters:
        - id: fromSequenceNumber
          type:
            - Long
          description: El número de secuencia desde donde leer el mensaje.
        - id: maxMessageCount
          type:
            - undefined | number
          description: ''
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveDeferredMessage'
    name: receiveDeferredMessage(Long)
    children: []
    type: method
    langs:
      - typeScript
    summary: Devuelve una promesa que se resuelve en un mensaje aplazado identificado por el determinado `sequenceNumber`.
    syntax:
      content: 'function receiveDeferredMessage(sequenceNumber: Long)'
      parameters:
        - id: sequenceNumber
          type:
            - Long
          description: El número de secuencia del mensaje que necesita para poder recibir.
      return:
        type:
          - Promise<@azure/service-bus.ServiceBusMessage | undefined>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveDeferredMessages'
    name: 'receiveDeferredMessages(Long[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Devuelve una promesa que se resuelve en una matriz de los mensajes aplazados identificado por asigna `sequenceNumbers`.
    syntax:
      content: 'function receiveDeferredMessages(sequenceNumbers: Long[])'
      parameters:
        - id: sequenceNumbers
          type:
            - 'Long[]'
          description: Una matriz de números de secuencia para los mensajes que necesitan para poder recibir.
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveMessages'
    name: 'receiveMessages(number, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Devuelve una promesa que se resuelve en una matriz de mensajes basada en recuento y tiempo de espera a través de un receptor de AMQP un vínculo desde una cola o suscripción.
      Produce un error si no hay otra operación de recepción en curso en el receptor del mismo. Si no está seguro de si hay otra ejecución de la operación de recepción, comprobar la `isReceivingMessages` propiedad en el receptor.
    syntax:
      content: 'function receiveMessages(maxMessageCount: number, maxWaitTimeInSeconds?: undefined | number)'
      parameters:
        - id: maxMessageCount
          type:
            - number
          description: El número máximo de mensajes que se va a recibir de cola o suscripción.
        - id: maxWaitTimeInSeconds
          type:
            - undefined | number
          description: |-
            El máximo tiempo de espera en segundos para que el receptor debe esperar para recibir el primer mensaje. Si no se recibe ningún mensaje Llegados a este punto, el compromiso devuelto se resuelva a una matriz vacía.
            - **Default**: `60` segundos.
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveMode'
    name: receiveMode
    fullName: receiveMode
    children: []
    langs:
      - typeScript
    type: property
    summary: Denota receiveMode de este receptor.
    syntax:
      content: 'receiveMode: ReceiveMode'
      return:
        type:
          - '@azure/service-bus.ReceiveMode'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.registerMessageHandler'
    name: 'registerMessageHandler(OnMessage, OnError, SessionMessageHandlerOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Registra los controladores para tratar con los flujos de mensajes entrantes a través de un vínculo AMQP del receptor de una cola o suscripción.
      Para detener la recepción de mensajes, llame a `close()` en el SessionReceiver.
      Produce un error si no hay otra operación de recepción en curso en el receptor del mismo. Si no está seguro de si hay otra ejecución de la operación de recepción, comprobar la `isReceivingMessages` propiedad en el receptor.
    syntax:
      content: 'function registerMessageHandler(onMessage: OnMessage, onError: OnError, options?: SessionMessageHandlerOptions)'
      parameters:
        - id: onMessage
          type:
            - '@azure/service-bus.OnMessage'
          description: Controlador para procesar cada mensaje entrante.
        - id: onError
          type:
            - '@azure/service-bus.OnError'
          description: Controlador para cualquier error que se produce al recibir o procesar los mensajes.
        - id: options
          type:
            - '@azure/service-bus.SessionMessageHandlerOptions'
          description: |
            Opciones para controlar si los mensajes se deben completar automáticamente o si se debe renovar automáticamente el bloqueo en la sesión. Puede controlar el número máximo de mensajes que se deben procesar simultáneamente. También puede proporcionar un tiempo de espera en segundos para indicar la cantidad de tiempo de espera para un mensaje nuevo antes de cerrar el receptor.
          optional: true
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.renewSessionLock'
    name: renewSessionLock()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Renueva el bloqueo en la sesión para la duración, tal como se especifica durante la creación de la cola o suscripción.
      - Compruebe el `sessionLockedUntilUtc` propiedad en el SessionReceiver durante el tiempo cuando expira el bloqueo.
      - Cuando expira el bloqueo en la sesión
          - No hay más mensajes pueden recibirse mediante este receptor
          - Si no se registra un mensaje (mediante `complete()`, `defer()` o `deadletter()`, antes de la sesión expira el bloqueo y luego la ultramar de mensaje en la cola o suscripción para la siguiente operación de recepción.
    syntax:
      content: function renewSessionLock()
      parameters: []
      return:
        type:
          - Promise<Date>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.sessionId'
    name: sessionId
    fullName: sessionId
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      El identificador de la sesión del que este receptor se recibirán los mensajes.
      Se devolverá sin definir hasta que un vínculo del receptor AMQP ha se ha configurado correctamente para la sesión.
    syntax:
      content: 'sessionId: string | undefined'
      return:
        type:
          - string | undefined
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.sessionLockedUntilUtc'
    name: sessionLockedUntilUtc
    fullName: sessionLockedUntilUtc
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      La hora en UTC hasta la que se bloquee la sesión.
      Cada vez que `renewSessionLock()` es llamado, se actualiza esta vez a la hora actual más la duración del bloqueo tal como se especifica durante la creación de la cola o suscripción.

      Se devolverá sin definir hasta que un vínculo del receptor AMQP ha se ha configurado correctamente para la sesión.
    syntax:
      content: 'sessionLockedUntilUtc: Date | undefined'
      return:
        type:
          - Date | undefined
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.setState'
    name: setState(any)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Establece el estado de la sesión. Para obtener más información sobre los Estados de sesión, vea [estado de sesión](https://docs.microsoft.com/en-us/azure/service-bus-messaging/message-sessions#message-session-state)'
    syntax:
      content: 'function setState(state: any)'
      parameters:
        - id: state
          type:
            - any
          description: |
            El estado que se debe establecer.
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.ReceiveMode'
    name: ReceiveMode
    spec.typeScript:
      - name: ReceiveMode
        fullName: ReceiveMode
        uid: '@azure/service-bus.ReceiveMode'
  - uid: AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    name: ServiceBusMessage>
    spec.typeScript:
      - name: AsyncIterableIterator<
        fullName: AsyncIterableIterator<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '>'
        fullName: '>'
  - uid: 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    name: 'ReceivedMessageInfo[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ReceivedMessageInfo
        fullName: ReceivedMessageInfo
        uid: '@azure/service-bus.ReceivedMessageInfo'
      - name: '[]>'
        fullName: '[]>'
  - uid: Promise<@azure/service-bus.ServiceBusMessage | undefined>
    name: ServiceBusMessage | undefined>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: ' | undefined>'
        fullName: ' | undefined>'
  - uid: 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    name: 'ServiceBusMessage[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/service-bus.OnMessage'
    name: OnMessage
    spec.typeScript:
      - name: OnMessage
        fullName: OnMessage
        uid: '@azure/service-bus.OnMessage'
  - uid: '@azure/service-bus.OnError'
    name: OnError
    spec.typeScript:
      - name: OnError
        fullName: OnError
        uid: '@azure/service-bus.OnError'
  - uid: '@azure/service-bus.SessionMessageHandlerOptions'
    name: SessionMessageHandlerOptions
    spec.typeScript:
      - name: SessionMessageHandlerOptions
        fullName: SessionMessageHandlerOptions
        uid: '@azure/service-bus.SessionMessageHandlerOptions'
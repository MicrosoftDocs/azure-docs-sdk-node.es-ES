### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.SubscriptionClient'
    name: SubscriptionClient
    fullName: SubscriptionClient
    children:
      - '@azure/service-bus.SubscriptionClient.addRule'
      - '@azure/service-bus.SubscriptionClient.close'
      - '@azure/service-bus.SubscriptionClient.createReceiver'
      - '@azure/service-bus.SubscriptionClient.createReceiver_1'
      - '@azure/service-bus.SubscriptionClient.defaultRuleName'
      - '@azure/service-bus.SubscriptionClient.entityPath'
      - '@azure/service-bus.SubscriptionClient.getRules'
      - '@azure/service-bus.SubscriptionClient.id'
      - '@azure/service-bus.SubscriptionClient.peek'
      - '@azure/service-bus.SubscriptionClient.peekBySequenceNumber'
      - '@azure/service-bus.SubscriptionClient.removeRule'
      - '@azure/service-bus.SubscriptionClient.subscriptionName'
      - '@azure/service-bus.SubscriptionClient.topicName'
    langs:
      - typeScript
    type: class
    summary: |-
      Describe al cliente que permite interactuar con una suscripción a Service Bus.
      Use el `createSubscriptionClient` función en el objeto ServiceBusClient para crear instancias de un SubscriptionClient
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.addRule'
    name: 'addRule(string, boolean | string | CorrelationFilter, undefined | string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Agrega una regla en la suscripción como se define en el nombre de la regla especificada, el filtro y la acción.
      **Nota**: Quite el filtro true de forma predeterminada en la suscripción antes de agregar una regla.
      En caso contrario, la regla se ha agregado no tendrá ningún efecto, como el filtro true hará siempre en la suscripción de recibir todos los mensajes.
    syntax:
      content: 'function addRule(ruleName: string, filter: boolean | string | CorrelationFilter, sqlRuleActionExpression?: undefined | string)'
      parameters:
        - id: ruleName
          type:
            - string
          description: Nombre de la regla.
        - id: filter
          type:
            - boolean | string | @azure/service-bus.CorrelationFilter
          description: 'Un valor booleano, expresión SQL o un filtro de correlación. Para la sintaxis de filtro de SQL, vea [sintaxis de SQLFilter](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-messaging-sql-filter).'
        - id: sqlRuleActionExpression
          type:
            - undefined | string
          description: |
            Acción que se realizará si el mensaje satisface la expresión de filtrado. Para conocer la sintaxis SQL la acción de regla, vea [sintaxis de SQLRuleAction](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-messaging-sql-rule-action).
          optional: true
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Cierra el vínculo AMQP para los receptores creados por este cliente.
      Una vez cerrado, el SubscriptionClient ni sus receptores pueden utilizarse para realizar más operaciones.
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.createReceiver'
    name: createReceiver(ReceiveMode)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Crea un receptor para recibir mensajes de una suscripción que no tienen sesiones habilitadas.
      - Produce el error si ya existe un receptor abierto para este SubscriptionClient.
      - Produce `InvalidOperationError` si la suscripción tiene sesiones habilitadas (en cuyo caso, utilice la sobrecarga de este método que toma `sessionOptions` argumento)
    syntax:
      content: 'function createReceiver(receiveMode: ReceiveMode)'
      parameters:
        - id: receiveMode
          type:
            - '@azure/service-bus.ReceiveMode'
          description: |
            Una enumeración que indica el modo en que se deben recibir los mensajes. Los valores posibles son:
            - `ReceiveMode.peekLock`: Una vez que se recibe un mensaje en este modo, el receptor tiene un bloqueo en el mensaje durante un tiempo determinado. Si el mensaje no se resuelvan mediante este tiempo, llega a activarlo de Service Bus para ser capturado por la siguiente operación de recepción.
            - `ReceiveMode.receiveAndDelete`: Los mensajes recibidos en este modo se quitarán automáticamente de Service Bus.
      return:
        type:
          - '@azure/service-bus.Receiver'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.createReceiver_1'
    name: 'createReceiver(ReceiveMode, SessionReceiverOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Crea un receptor para recibir mensajes desde una sesión habilitada la suscripción. Cuando no se especifica ningún Id. de sesión, se utiliza una sesión aleatoria entre las sesiones disponibles.
      - Se produce error si un receptor abierto ya existe para la dada sessionId.
      - Produce `SessionCannotBeLockedError` si la suscripción no tienen sesiones habilitadas (en cuyo caso no pase el `sessionOptions` argumento) o si Service Bus no es capaz de obtener un bloqueo en la sesión (en qué casos vuelva a intentarlo más tarde)
    syntax:
      content: 'function createReceiver(receiveMode: ReceiveMode, sessionOptions: SessionReceiverOptions)'
      parameters:
        - id: receiveMode
          type:
            - '@azure/service-bus.ReceiveMode'
          description: |-
            Una enumeración que indica el modo en que se deben recibir los mensajes. Los valores posibles son:
            - `ReceiveMode.peekLock`: Una vez que se recibe un mensaje en este modo, el receptor tiene un bloqueo en el mensaje durante un tiempo determinado. Si el mensaje no se resuelvan mediante este tiempo, llega a activarlo de Service Bus para ser capturado por la siguiente operación de recepción.
            - `ReceiveMode.receiveAndDelete`: Los mensajes recibidos en este modo se quitarán automáticamente de Service Bus.
        - id: sessionOptions
          type:
            - '@azure/service-bus.SessionReceiverOptions'
          description: |
            Opciones para proporcionar el Id. de sesión y la duración de la renovación del bloqueo automático para el receptor de sesión.
      return:
        type:
          - '@azure/service-bus.SessionReceiver'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.defaultRuleName'
    name: defaultRuleName
    fullName: defaultRuleName
    children: []
    langs:
      - typeScript
    type: property
    summary: El nombre de la regla predeterminada en la suscripción.
    syntax:
      content: 'defaultRuleName: string'
      return:
        type:
          - string
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.entityPath'
    name: entityPath
    fullName: entityPath
    children: []
    langs:
      - typeScript
    type: property
    summary: La ruta de acceso para la suscripción a Service Bus para el que se creó este cliente.
    syntax:
      content: 'entityPath: string'
      return:
        type:
          - string
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.getRules'
    name: getRules()
    children: []
    type: method
    langs:
      - typeScript
    summary: Obtiene todas las reglas asociadas con la suscripción
    syntax:
      content: function getRules()
      parameters: []
      return:
        type:
          - 'Promise<@azure/service-bus.RuleDescription[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.id'
    name: id
    fullName: id
    children: []
    langs:
      - typeScript
    type: property
    summary: Un identificador único para este cliente.
    syntax:
      content: 'id: string'
      return:
        type:
          - string
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.peek'
    name: peek(undefined | number)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Recupera el siguiente lote de mensajes activos (incluidos diferida, pero no deadlettered mensajes).
      - La primera llamada a `peek()` captura el primer mensaje activo. Cada llamada posterior realizada captura el mensaje subsiguiente.
      - A diferencia de un `received` mensaje, `peeked` mensaje es una versión de solo lectura del mensaje.
      No puede ser `Completed/Abandoned/Deferred/Deadlettered`. No se puede renovar el bloqueo en él.
    syntax:
      content: 'function peek(maxMessageCount?: undefined | number)'
      parameters:
        - id: maxMessageCount
          type:
            - undefined | number
          description: ''
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.peekBySequenceNumber'
    name: 'peekBySequenceNumber(Long, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Busca el número deseado de mensajes activos (incluidos diferida, pero no los mensajes deadlettered) del número de secuencia especificado.
      - A diferencia de un `received` mensaje, `peeked` mensaje es una versión de solo lectura del mensaje.
      No puede ser `Completed/Abandoned/Deferred/Deadlettered`. No se puede renovar el bloqueo en él.
    syntax:
      content: 'function peekBySequenceNumber(fromSequenceNumber: Long, maxMessageCount?: undefined | number)'
      parameters:
        - id: fromSequenceNumber
          type:
            - Long
          description: El número de secuencia desde donde leer el mensaje.
        - id: maxMessageCount
          type:
            - undefined | number
          description: ''
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.removeRule'
    name: removeRule(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Quita la regla en la suscripción identificada por el nombre de regla determinada.
      **Precaución**: Si se quitan todas las reglas en una suscripción, la suscripción no recibirá más mensajes.
    syntax:
      content: 'function removeRule(ruleName: string)'
      parameters:
        - id: ruleName
          type:
            - string
          description: |+

      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.subscriptionName'
    name: subscriptionName
    fullName: subscriptionName
    children: []
    langs:
      - typeScript
    type: property
    summary: El nombre de la suscripción a Service Bus para el que se creó este cliente.
    syntax:
      content: 'subscriptionName: string'
      return:
        type:
          - string
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SubscriptionClient.topicName'
    name: topicName
    fullName: topicName
    children: []
    langs:
      - typeScript
    type: property
    summary: 'El nombre de tema de Service Bus para cuya suscripción, se crea este cliente.'
    syntax:
      content: 'topicName: string'
      return:
        type:
          - string
    package: '@azure/service-bus'
references:
  - uid: boolean | string | @azure/service-bus.CorrelationFilter
    name: CorrelationFilter
    spec.typeScript:
      - name: 'boolean | string | '
        fullName: 'boolean | string | '
      - name: CorrelationFilter
        fullName: CorrelationFilter
        uid: '@azure/service-bus.CorrelationFilter'
  - uid: '@azure/service-bus.ReceiveMode'
    name: ReceiveMode
    spec.typeScript:
      - name: ReceiveMode
        fullName: ReceiveMode
        uid: '@azure/service-bus.ReceiveMode'
  - uid: '@azure/service-bus.Receiver'
    name: Receiver
    spec.typeScript:
      - name: Receiver
        fullName: Receiver
        uid: '@azure/service-bus.Receiver'
  - uid: '@azure/service-bus.SessionReceiverOptions'
    name: SessionReceiverOptions
    spec.typeScript:
      - name: SessionReceiverOptions
        fullName: SessionReceiverOptions
        uid: '@azure/service-bus.SessionReceiverOptions'
  - uid: '@azure/service-bus.SessionReceiver'
    name: SessionReceiver
    spec.typeScript:
      - name: SessionReceiver
        fullName: SessionReceiver
        uid: '@azure/service-bus.SessionReceiver'
  - uid: 'Promise<@azure/service-bus.RuleDescription[]>'
    name: 'RuleDescription[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: RuleDescription
        fullName: RuleDescription
        uid: '@azure/service-bus.RuleDescription'
      - name: '[]>'
        fullName: '[]>'
  - uid: 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    name: 'ReceivedMessageInfo[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ReceivedMessageInfo
        fullName: ReceivedMessageInfo
        uid: '@azure/service-bus.ReceivedMessageInfo'
      - name: '[]>'
        fullName: '[]>'
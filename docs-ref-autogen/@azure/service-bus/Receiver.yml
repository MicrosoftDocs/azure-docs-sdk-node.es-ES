### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.Receiver'
    name: Receiver
    fullName: Receiver
    children:
      - '@azure/service-bus.Receiver.close'
      - '@azure/service-bus.Receiver.getMessageIterator'
      - '@azure/service-bus.Receiver.isClosed'
      - '@azure/service-bus.Receiver.isReceivingMessages'
      - '@azure/service-bus.Receiver.receiveDeferredMessage'
      - '@azure/service-bus.Receiver.receiveDeferredMessages'
      - '@azure/service-bus.Receiver.receiveMessages'
      - '@azure/service-bus.Receiver.receiveMode'
      - '@azure/service-bus.Receiver.registerMessageHandler'
      - '@azure/service-bus.Receiver.renewMessageLock'
    langs:
      - typeScript
    type: class
    summary: |-
      <span data-ttu-id="f8490-101">La clase del receptor puede utilizarse para recibir mensajes en un lote o mediante el registro de controladores.</span><span class="sxs-lookup"><span data-stu-id="f8490-101">The Receiver class can be used to receive messages in a batch or by registering handlers.</span></span>
      <span data-ttu-id="f8490-102">Use el `createReceiver` funcionan en QueueClient o SubscriptionClient para crear instancias de un receptor.</span><span class="sxs-lookup"><span data-stu-id="f8490-102">Use the `createReceiver` function on the QueueClient or SubscriptionClient to instantiate a Receiver.</span></span>
      <span data-ttu-id="f8490-103">La clase del receptor es una abstracción sobre el vínculo del receptor AMQP subyacente.</span><span class="sxs-lookup"><span data-stu-id="f8490-103">The Receiver class is an abstraction over the underlying AMQP receiver link.</span></span>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="f8490-104">Cierra el vínculo del receptor AMQP subyacente.</span><span class="sxs-lookup"><span data-stu-id="f8490-104">Closes the underlying AMQP receiver link.</span></span>
      <span data-ttu-id="f8490-105">Una vez cerrado, el receptor no puede usarse para realizar más operaciones.</span><span class="sxs-lookup"><span data-stu-id="f8490-105">Once closed, the receiver cannot be used for any further operations.</span></span>
      <span data-ttu-id="f8490-106">Use el `createReceiver` funcionan en QueueClient o SubscriptionClient para crear instancias de un nuevo destinatario</span><span class="sxs-lookup"><span data-stu-id="f8490-106">Use the `createReceiver` function on the QueueClient or SubscriptionClient to instantiate a new Receiver</span></span>
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.getMessageIterator'
    name: getMessageIterator()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      <span data-ttu-id="f8490-107">Obtiene un iterador de asincronía a través de mensajes desde el receptor.</span><span class="sxs-lookup"><span data-stu-id="f8490-107">Gets an async iterator over messages from the receiver.</span></span>
      <span data-ttu-id="f8490-108">Produce un error si no hay otra operación de recepción en curso en el receptor del mismo.</span><span class="sxs-lookup"><span data-stu-id="f8490-108">Throws an error if there is another receive operation in progress on the same receiver.</span></span> <span data-ttu-id="f8490-109">Si no está seguro de si hay otra ejecución de la operación de recepción, comprobar la `isReceivingMessages` propiedad en el receptor.</span><span class="sxs-lookup"><span data-stu-id="f8490-109">If you are not sure whether there is another receive operation running, check the `isReceivingMessages` property on the receiver.</span></span>

      <span data-ttu-id="f8490-110">Si el iterador no es capaz de capturar un nuevo mensaje en más de un minuto, `undefined` se devolverá.</span><span class="sxs-lookup"><span data-stu-id="f8490-110">If the iterator is not able to fetch a new message in over a minute, `undefined` will be returned.</span></span>
    syntax:
      content: function getMessageIterator()
      parameters: []
      return:
        type:
          - AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.isClosed'
    name: isClosed
    fullName: isClosed
    children: []
    langs:
      - typeScript
    type: property
    summary: <span data-ttu-id="f8490-111">Devuelve `true` si el receptor está cerrado.</span><span class="sxs-lookup"><span data-stu-id="f8490-111">Returns `true` if the receiver is closed.</span></span> <span data-ttu-id="f8490-112">Esto puede ocurrir cualquiera se ha cerrado porque se ha cerrado el receptor de sí mismo o el cliente que creó.</span><span class="sxs-lookup"><span data-stu-id="f8490-112">This can happen either because the receiver itself has been closed or the client that created it has been closed.</span></span>
    syntax:
      content: 'isClosed: boolean'
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.isReceivingMessages'
    name: isReceivingMessages()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="f8490-113">Indica si el receptor está recibiendo actualmente mensajes o no.</span><span class="sxs-lookup"><span data-stu-id="f8490-113">Indicates whether the receiver is currently receiving messages or not.</span></span>
      <span data-ttu-id="f8490-114">Cuando devuelve true, nuevo `registerMessageHandler()` o `receiveMessages()` no se pueden realizar llamadas.</span><span class="sxs-lookup"><span data-stu-id="f8490-114">When this returns true, new `registerMessageHandler()` or `receiveMessages()` calls cannot be made.</span></span>
    syntax:
      content: function isReceivingMessages()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveDeferredMessage'
    name: receiveDeferredMessage(Long)
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="f8490-115">Devuelve una promesa que se resuelve en un mensaje aplazado identificado por el determinado `sequenceNumber`.</span><span class="sxs-lookup"><span data-stu-id="f8490-115">Returns a promise that resolves to a deferred message identified by the given `sequenceNumber`.</span></span>
    syntax:
      content: 'function receiveDeferredMessage(sequenceNumber: Long)'
      parameters:
        - id: sequenceNumber
          type:
            - Long
          description: <span data-ttu-id="f8490-116">El número de secuencia del mensaje que necesita para poder recibir.</span><span class="sxs-lookup"><span data-stu-id="f8490-116">The sequence number of the message that needs to be received.</span></span>
      return:
        type:
          - Promise<@azure/service-bus.ServiceBusMessage | undefined>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveDeferredMessages'
    name: 'receiveDeferredMessages(Long[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="f8490-117">Devuelve una promesa que se resuelve en una matriz de los mensajes aplazados identificado por asigna `sequenceNumbers`.</span><span class="sxs-lookup"><span data-stu-id="f8490-117">Returns a promise that resolves to an array of deferred messages identified by given `sequenceNumbers`.</span></span>
    syntax:
      content: 'function receiveDeferredMessages(sequenceNumbers: Long[])'
      parameters:
        - id: sequenceNumbers
          type:
            - 'Long[]'
          description: <span data-ttu-id="f8490-118">Una matriz de números de secuencia para los mensajes que necesitan para poder recibir.</span><span class="sxs-lookup"><span data-stu-id="f8490-118">An array of sequence numbers for the messages that need to be received.</span></span>
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveMessages'
    name: 'receiveMessages(number, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      <span data-ttu-id="f8490-119">Devuelve una promesa que se resuelve en una matriz de mensajes basada en recuento y tiempo de espera a través de un receptor de AMQP un vínculo desde una cola o suscripción.</span><span class="sxs-lookup"><span data-stu-id="f8490-119">Returns a promise that resolves to an array of messages based on given count and timeout over an AMQP receiver link from a Queue/Subscription.</span></span>
      <span data-ttu-id="f8490-120">Produce un error si no hay otra operación de recepción en curso en el receptor del mismo.</span><span class="sxs-lookup"><span data-stu-id="f8490-120">Throws an error if there is another receive operation in progress on the same receiver.</span></span> <span data-ttu-id="f8490-121">Si no está seguro de si hay otra ejecución de la operación de recepción, comprobar la `isReceivingMessages` propiedad en el receptor.</span><span class="sxs-lookup"><span data-stu-id="f8490-121">If you are not sure whether there is another receive operation running, check the `isReceivingMessages` property on the receiver.</span></span>
    syntax:
      content: 'function receiveMessages(maxMessageCount: number, idleTimeoutInSeconds?: undefined | number)'
      parameters:
        - id: maxMessageCount
          type:
            - number
          description: <span data-ttu-id="f8490-122">El número máximo de mensajes que se va a recibir de cola o suscripción.</span><span class="sxs-lookup"><span data-stu-id="f8490-122">The maximum number of messages to receive from Queue/Subscription.</span></span>
        - id: idleTimeoutInSeconds
          type:
            - undefined | number
          description: |-
            <span data-ttu-id="f8490-123">El máximo tiempo de espera en segundos para que el receptor debe esperar para recibir el primer mensaje.</span><span class="sxs-lookup"><span data-stu-id="f8490-123">The maximum wait time in seconds for which the Receiver should wait to receive the first message.</span></span> <span data-ttu-id="f8490-124">Si no se recibe ningún mensaje Llegados a este punto, el compromiso devuelto se resuelva a una matriz vacía.</span><span class="sxs-lookup"><span data-stu-id="f8490-124">If no message is received by this time, the returned promise gets resolved to an empty array.</span></span>
            - <span data-ttu-id="f8490-125">**Default**: `60` segundos.</span><span class="sxs-lookup"><span data-stu-id="f8490-125">**Default**: `60` seconds.</span></span>
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.receiveMode'
    name: receiveMode
    fullName: receiveMode
    children: []
    langs:
      - typeScript
    type: property
    summary: <span data-ttu-id="f8490-126">Denota receiveMode de este receptor.</span><span class="sxs-lookup"><span data-stu-id="f8490-126">Denotes receiveMode of this receiver.</span></span>
    syntax:
      content: 'receiveMode: ReceiveMode'
      return:
        type:
          - '@azure/service-bus.ReceiveMode'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.registerMessageHandler'
    name: 'registerMessageHandler(OnMessage, OnError, MessageHandlerOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      <span data-ttu-id="f8490-127">Registra los controladores para tratar con los flujos de mensajes entrantes a través de un vínculo AMQP del receptor de una cola o suscripción.</span><span class="sxs-lookup"><span data-stu-id="f8490-127">Registers handlers to deal with the incoming stream of messages over an AMQP receiver link from a Queue/Subscription.</span></span>
      <span data-ttu-id="f8490-128">Para detener la recepción de mensajes, llame a `close()` en el receptor.</span><span class="sxs-lookup"><span data-stu-id="f8490-128">To stop receiving messages, call `close()` on the Receiver.</span></span>
      <span data-ttu-id="f8490-129">Produce un error si no hay otra operación de recepción en curso en el receptor del mismo.</span><span class="sxs-lookup"><span data-stu-id="f8490-129">Throws an error if there is another receive operation in progress on the same receiver.</span></span> <span data-ttu-id="f8490-130">Si no está seguro de si hay otra ejecución de la operación de recepción, comprobar la `isReceivingMessages` propiedad en el receptor.</span><span class="sxs-lookup"><span data-stu-id="f8490-130">If you are not sure whether there is another receive operation running, check the `isReceivingMessages` property on the receiver.</span></span>
    syntax:
      content: 'function registerMessageHandler(onMessage: OnMessage, onError: OnError, options?: MessageHandlerOptions)'
      parameters:
        - id: onMessage
          type:
            - '@azure/service-bus.OnMessage'
          description: <span data-ttu-id="f8490-131">Controlador para procesar cada mensaje entrante.</span><span class="sxs-lookup"><span data-stu-id="f8490-131">Handler for processing each incoming message.</span></span>
        - id: onError
          type:
            - '@azure/service-bus.OnError'
          description: <span data-ttu-id="f8490-132">Controlador para cualquier error que se produce al recibir o procesar los mensajes.</span><span class="sxs-lookup"><span data-stu-id="f8490-132">Handler for any error that occurs while receiving or processing messages.</span></span>
        - id: options
          type:
            - '@azure/service-bus.MessageHandlerOptions'
          description: |
            <span data-ttu-id="f8490-133">Opciones para controlar si se deben completar automáticamente los mensajes o disponen de los bloqueos se renuevan automáticamente.</span><span class="sxs-lookup"><span data-stu-id="f8490-133">Options to control if messages should be automatically completed, and/or have their locks automatically renewed.</span></span> <span data-ttu-id="f8490-134">Puede controlar el número máximo de mensajes que se deben procesar simultáneamente.</span><span class="sxs-lookup"><span data-stu-id="f8490-134">You can control the maximum number of messages that should be concurrently processed.</span></span> <span data-ttu-id="f8490-135">También puede proporcionar un tiempo de espera en segundos para indicar la cantidad de tiempo de espera para un mensaje nuevo antes de cerrar el receptor.</span><span class="sxs-lookup"><span data-stu-id="f8490-135">You can also provide a timeout in seconds to denote the amount of time to wait for a new message before closing the receiver.</span></span>
          optional: true
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Receiver.renewMessageLock'
    name: renewMessageLock(string | ServiceBusMessage)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="f8490-136">Renueva el bloqueo del mensaje para la duración, tal como se especifica durante la creación de la cola o suscripción.</span><span class="sxs-lookup"><span data-stu-id="f8490-136">Renews the lock on the message for the duration as specified during the Queue/Subscription creation.</span></span>
      - <span data-ttu-id="f8490-137">Compruebe el `lockedUntilUtc` propiedad en el mensaje para el tiempo de cuando expira el bloqueo.</span><span class="sxs-lookup"><span data-stu-id="f8490-137">Check the `lockedUntilUtc` property on the message for the time when the lock expires.</span></span>
      - <span data-ttu-id="f8490-138">Si no se registra un mensaje (mediante `complete()`, `defer()` o `deadletter()`, antes de que expire el bloqueo, entonces el ultramar de mensaje en la cola o suscripción para la siguiente operación de recepción.</span><span class="sxs-lookup"><span data-stu-id="f8490-138">If a message is not settled (using either `complete()`, `defer()` or `deadletter()`, before its lock expires, then the message lands back in the Queue/Subscription for the next receive operation.</span></span>
    syntax:
      content: 'function renewMessageLock(lockTokenOrMessage: string | ServiceBusMessage)'
      parameters:
        - id: lockTokenOrMessage
          type:
            - string | @azure/service-bus.ServiceBusMessage
          description: <span data-ttu-id="f8490-139">El `lockToken` propiedad del mensaje o el propio mensaje.</span><span class="sxs-lookup"><span data-stu-id="f8490-139">The `lockToken` property of the message or the message itself.</span></span>
      return:
        type:
          - Promise<Date>
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.ReceiveMode'
    name: ReceiveMode
    spec.typeScript:
      - name: ReceiveMode
        fullName: ReceiveMode
        uid: '@azure/service-bus.ReceiveMode'
  - uid: AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    name: ServiceBusMessage>
    spec.typeScript:
      - name: AsyncIterableIterator<
        fullName: AsyncIterableIterator<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '>'
        fullName: '>'
  - uid: Promise<@azure/service-bus.ServiceBusMessage | undefined>
    name: ServiceBusMessage | undefined>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: ' | undefined>'
        fullName: ' | undefined>'
  - uid: 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    name: 'ServiceBusMessage[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/service-bus.OnMessage'
    name: OnMessage
    spec.typeScript:
      - name: OnMessage
        fullName: OnMessage
        uid: '@azure/service-bus.OnMessage'
  - uid: '@azure/service-bus.OnError'
    name: OnError
    spec.typeScript:
      - name: OnError
        fullName: OnError
        uid: '@azure/service-bus.OnError'
  - uid: '@azure/service-bus.MessageHandlerOptions'
    name: MessageHandlerOptions
    spec.typeScript:
      - name: MessageHandlerOptions
        fullName: MessageHandlerOptions
        uid: '@azure/service-bus.MessageHandlerOptions'
  - uid: string | @azure/service-bus.ServiceBusMessage
    name: ServiceBusMessage
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.Sender'
    name: Sender
    fullName: Sender
    children:
      - '@azure/service-bus.Sender.cancelScheduledMessage'
      - '@azure/service-bus.Sender.cancelScheduledMessages'
      - '@azure/service-bus.Sender.close'
      - '@azure/service-bus.Sender.isClosed'
      - '@azure/service-bus.Sender.scheduleMessage'
      - '@azure/service-bus.Sender.scheduleMessages'
      - '@azure/service-bus.Sender.send'
      - '@azure/service-bus.Sender.sendBatch'
    langs:
      - typeScript
    type: class
    summary: |-
      La clase remitente puede usarse para enviar mensajes, programar mensajes para enviarse en un momento posterior y cancelar tales mensajes programados.
      Use el `createSender` funcionan en QueueClient o TopicClient para crear instancias de un remitente.
      La clase del remitente es una abstracción sobre el vínculo del remitente AMQP subyacente.
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.cancelScheduledMessage'
    name: cancelScheduledMessage(Long)
    children: []
    type: method
    langs:
      - typeScript
    summary: Cancela un mensaje que se programó para aparecer en una cola o suscripción de bus de servicio.
    syntax:
      content: 'function cancelScheduledMessage(sequenceNumber: Long)'
      parameters:
        - id: sequenceNumber
          type:
            - Long
          description: El número de secuencia del mensaje que debe cancelarse.
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.cancelScheduledMessages'
    name: 'cancelScheduledMessages(Long[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Cancela varios mensajes que se programaron para aparecer en una cola o suscripción de bus de servicio.
    syntax:
      content: 'function cancelScheduledMessages(sequenceNumbers: Long[])'
      parameters:
        - id: sequenceNumbers
          type:
            - 'Long[]'
          description: Una matriz de números de secuencia de los mensajes que debe cancelarse.
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Cierra el vínculo del remitente AMQP subyacente.
      Una vez cerrado, el remitente no se puede usar para realizar más operaciones.
      Use el `createSender` funcionan en QueueClient o TopicClient para crear instancias de un nuevo remitente
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.isClosed'
    name: isClosed
    fullName: isClosed
    children: []
    langs:
      - typeScript
    type: property
    summary: Devuelve `true` si se ha cerrado el remitente o el cliente que lo creó
    syntax:
      content: 'isClosed: boolean'
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.scheduleMessage'
    name: 'scheduleMessage(Date, SendableMessageInfo)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Programaciones dados mensaje aparezca en el Bus de servicio de cola o suscripción en un momento posterior.
    syntax:
      content: 'function scheduleMessage(scheduledEnqueueTimeUtc: Date, message: SendableMessageInfo)'
      parameters:
        - id: scheduledEnqueueTimeUtc
          type:
            - Date
          description: La hora UTC a la que el mensaje debe poner en cola.
        - id: message
          type:
            - '@azure/service-bus.SendableMessageInfo'
          description: El mensaje que se debe programar.
      return:
        type:
          - Promise<Long>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.scheduleMessages'
    name: 'scheduleMessages(Date, SendableMessageInfo[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Programaciones dados los mensajes que aparecen en el Bus de servicio de cola o suscripción en un momento posterior.
    syntax:
      content: 'function scheduleMessages(scheduledEnqueueTimeUtc: Date, messages: SendableMessageInfo[])'
      parameters:
        - id: scheduledEnqueueTimeUtc
          type:
            - Date
          description: La hora UTC a la que los mensajes deben ser puestos en cola.
        - id: messages
          type:
            - '@azure/service-bus.SendableMessageInfo[]'
          description: Matriz de mensajes que se deben programar.
      return:
        type:
          - 'Promise<Long[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.send'
    name: send(SendableMessageInfo)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Envía el mensaje especificado después de crear un vínculo AMQP remitente si aún no existe.
      Para enviar un mensaje a un `session` o `partition` tema o cola habilitado, establezca el `sessionId` o `partitionKey` propiedades respectivamente en el mensaje.
    syntax:
      content: 'function send(message: SendableMessageInfo)'
      parameters:
        - id: message
          type:
            - '@azure/service-bus.SendableMessageInfo'
          description: Mensaje que se enviará.
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.sendBatch'
    name: 'sendBatch(SendableMessageInfo[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Envía los mensajes determinados en un único lote, es decir, en un único mensaje AMQP después de crear un vínculo AMQP remitente si aún no existe.
      - Para enviar mensajes a un `session` o `partition` tema o cola habilitado, establezca el `sessionId` o `partitionKey` propiedades respectivamente en los mensajes.
      - Al hacerlo, todos los mensajes del lote deben tener el mismo `sessionId` (si usa las sesiones) y el mismo `parititionKey` (si usa particiones).
    syntax:
      content: 'function sendBatch(messages: SendableMessageInfo[])'
      parameters:
        - id: messages
          type:
            - '@azure/service-bus.SendableMessageInfo[]'
          description: Una matriz de objetos SendableMessageInfo para enviarlo en un mensaje por lotes.
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.SendableMessageInfo'
    name: SendableMessageInfo
    spec.typeScript:
      - name: SendableMessageInfo
        fullName: SendableMessageInfo
        uid: '@azure/service-bus.SendableMessageInfo'
  - uid: '@azure/service-bus.SendableMessageInfo[]'
    name: 'SendableMessageInfo[]'
    spec.typeScript:
      - name: SendableMessageInfo
        fullName: SendableMessageInfo
        uid: '@azure/service-bus.SendableMessageInfo'
      - name: '[]'
        fullName: '[]'
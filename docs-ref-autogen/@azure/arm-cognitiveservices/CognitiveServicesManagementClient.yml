### YamlMime:UniversalReference
items:
  - uid: '@azure/arm-cognitiveservices.CognitiveServicesManagementClient'
    name: CognitiveServicesManagementClient
    fullName: CognitiveServicesManagementClient
    children:
      - '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.acceptLanguage'
      - '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.accounts'
      - '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.apiVersion'
      - '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.beginLongRunningRequest'
      - '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.checkDomainAvailability'
      - '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.checkDomainAvailability_2'
      - '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.checkDomainAvailability_1'
      - '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.checkSkuAvailability'
      - '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.constructor'
      - '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.credentials'
      - '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.longRunningOperationRetryTimeout'
      - '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.operations'
      - '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.resourceSkus'
      - '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.restoreLROPoller'
      - '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.sendLongRunningRequest'
      - '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.sendLRORequest'
      - '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.sendOperationRequest'
      - '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.sendRequest'
      - '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.subscriptionId'
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: '@azure/arm-cognitiveservices.CognitiveServicesManagementClientContext'
    package: '@azure/arm-cognitiveservices'
  - uid: '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.acceptLanguage'
    name: acceptLanguage
    fullName: acceptLanguage
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'acceptLanguage: string'
      return:
        type:
          - string
    package: '@azure/arm-cognitiveservices'
  - uid: '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.accounts'
    name: accounts
    fullName: accounts
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'accounts: Accounts'
      return:
        type:
          - '@azure/arm-cognitiveservices.Accounts'
    package: '@azure/arm-cognitiveservices'
  - uid: '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.apiVersion'
    name: apiVersion
    fullName: apiVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'apiVersion?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/arm-cognitiveservices'
  - uid: '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.beginLongRunningRequest'
    name: 'beginLongRunningRequest(RequestPrepareOptions | WebResource, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="2207e-101">Enviar la solicitud inicial de un LRO (larga ejecución como operación) y obtener un HttpLongRunningOperationResponse que proporciona métodos para sondear el LRO y comprobar si el LRO finalizada.</span><span class="sxs-lookup"><span data-stu-id="2207e-101">Send the initial request of a LRO (long running operation) and get back an HttpLongRunningOperationResponse that provides methods for polling the LRO and checking if the LRO is finished.</span></span>
    syntax:
      content: 'function beginLongRunningRequest(request: RequestPrepareOptions | WebResource, options?: RequestOptionsBase)'
      parameters:
        - id: request
          type:
            - RequestPrepareOptions | WebResource
          description: <span data-ttu-id="2207e-102">El objeto de solicitud</span><span class="sxs-lookup"><span data-stu-id="2207e-102">The request object</span></span>
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<LROPoller>
    package: '@azure/arm-cognitiveservices'
  - uid: '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.checkDomainAvailability'
    name: 'checkDomainAvailability(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="2207e-103">Compruebe si un dominio está disponible.</span><span class="sxs-lookup"><span data-stu-id="2207e-103">Check whether a domain is available.</span></span>
    syntax:
      content: 'function checkDomainAvailability(subdomainName: string, type: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: subdomainName
          type:
            - string
          description: <span data-ttu-id="2207e-104">El nombre de subdominio que use.</span><span class="sxs-lookup"><span data-stu-id="2207e-104">The subdomain name to use.</span></span>
        - id: type
          type:
            - string
          description: <span data-ttu-id="2207e-105">El tipo del recurso.</span><span class="sxs-lookup"><span data-stu-id="2207e-105">The Type of the resource.</span></span>
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.CheckDomainAvailabilityResponse>
    package: '@azure/arm-cognitiveservices'
  - uid: '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.checkDomainAvailability_2'
    name: 'checkDomainAvailability(string, string, RequestOptionsBase, ServiceCallback<CheckDomainAvailabilityResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function checkDomainAvailability(subdomainName: string, type: string, options: RequestOptionsBase, callback: ServiceCallback<CheckDomainAvailabilityResult>)'
      parameters:
        - id: subdomainName
          type:
            - string
          description: <span data-ttu-id="2207e-106">El nombre de subdominio que use.</span><span class="sxs-lookup"><span data-stu-id="2207e-106">The subdomain name to use.</span></span>
        - id: type
          type:
            - string
          description: <span data-ttu-id="2207e-107">El tipo del recurso.</span><span class="sxs-lookup"><span data-stu-id="2207e-107">The Type of the resource.</span></span>
        - id: options
          type:
            - RequestOptionsBase
          description: <span data-ttu-id="2207e-108">Los parámetros opcionales</span><span class="sxs-lookup"><span data-stu-id="2207e-108">The optional parameters</span></span>
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cognitiveservices.CheckDomainAvailabilityResult>
          description: |
            <span data-ttu-id="2207e-109">La devolución de llamada</span><span class="sxs-lookup"><span data-stu-id="2207e-109">The callback</span></span>
      return:
        type:
          - Promise<Models.CheckDomainAvailabilityResponse>
    package: '@azure/arm-cognitiveservices'
  - uid: '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.checkDomainAvailability_1'
    name: 'checkDomainAvailability(string, string, ServiceCallback<CheckDomainAvailabilityResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function checkDomainAvailability(subdomainName: string, type: string, callback: ServiceCallback<CheckDomainAvailabilityResult>)'
      parameters:
        - id: subdomainName
          type:
            - string
          description: <span data-ttu-id="2207e-110">El nombre de subdominio que use.</span><span class="sxs-lookup"><span data-stu-id="2207e-110">The subdomain name to use.</span></span>
        - id: type
          type:
            - string
          description: <span data-ttu-id="2207e-111">El tipo del recurso.</span><span class="sxs-lookup"><span data-stu-id="2207e-111">The Type of the resource.</span></span>
        - id: callback
          type:
            - ServiceCallback<@azure/arm-cognitiveservices.CheckDomainAvailabilityResult>
          description: |
            <span data-ttu-id="2207e-112">La devolución de llamada</span><span class="sxs-lookup"><span data-stu-id="2207e-112">The callback</span></span>
      return:
        type:
          - Promise<Models.CheckDomainAvailabilityResponse>
    package: '@azure/arm-cognitiveservices'
  - uid: '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.checkSkuAvailability'
    name: checkSkuAvailability
    fullName: checkSkuAvailability
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'checkSkuAvailability: CheckSkuAvailability'
      return:
        type:
          - '@azure/arm-cognitiveservices.CheckSkuAvailability'
    package: '@azure/arm-cognitiveservices'
  - uid: '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.constructor'
    name: 'CognitiveServicesManagementClient(ServiceClientCredentials, string, Models.CognitiveServicesManagementClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: <span data-ttu-id="2207e-113">Inicializa una nueva instancia de la clase CognitiveServicesManagementClient.</span><span class="sxs-lookup"><span data-stu-id="2207e-113">Initializes a new instance of the CognitiveServicesManagementClient class.</span></span>
    syntax:
      content: 'new CognitiveServicesManagementClient(credentials: ServiceClientCredentials, subscriptionId: string, options?: Models.CognitiveServicesManagementClientOptions)'
      parameters:
        - id: credentials
          type:
            - ServiceClientCredentials
          description: <span data-ttu-id="2207e-114">Credenciales necesarias para que el cliente para conectarse a Azure.</span><span class="sxs-lookup"><span data-stu-id="2207e-114">Credentials needed for the client to connect to Azure.</span></span>
        - id: subscriptionId
          type:
            - string
          description: <span data-ttu-id="2207e-115">Identificador de suscripción de Azure</span><span class="sxs-lookup"><span data-stu-id="2207e-115">Azure Subscription ID.</span></span>
        - id: options
          type:
            - Models.CognitiveServicesManagementClientOptions
          description: ''
          optional: true
    package: '@azure/arm-cognitiveservices'
  - uid: '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.credentials'
    name: credentials
    fullName: credentials
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'credentials: ServiceClientCredentials'
      return:
        type:
          - ServiceClientCredentials
    package: '@azure/arm-cognitiveservices'
  - uid: '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.longRunningOperationRetryTimeout'
    name: longRunningOperationRetryTimeout
    fullName: longRunningOperationRetryTimeout
    children: []
    langs:
      - typeScript
    type: property
    summary: <span data-ttu-id="2207e-116">El tiempo de espera de reintento en segundos para las operaciones de ejecución larga.</span><span class="sxs-lookup"><span data-stu-id="2207e-116">The retry timeout in seconds for Long Running Operations.</span></span> <span data-ttu-id="2207e-117">El valor predeterminado es 30.</span><span class="sxs-lookup"><span data-stu-id="2207e-117">Default value is 30.</span></span>
    optional: true
    syntax:
      content: 'longRunningOperationRetryTimeout?: undefined | number'
      return:
        type:
          - undefined | number
    package: '@azure/arm-cognitiveservices'
  - uid: '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.operations'
    name: operations
    fullName: operations
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'operations: Operations'
      return:
        type:
          - '@azure/arm-cognitiveservices.Operations'
    package: '@azure/arm-cognitiveservices'
  - uid: '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.resourceSkus'
    name: resourceSkus
    fullName: resourceSkus
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'resourceSkus: ResourceSkus'
      return:
        type:
          - '@azure/arm-cognitiveservices.ResourceSkus'
    package: '@azure/arm-cognitiveservices'
  - uid: '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.restoreLROPoller'
    name: restoreLROPoller(LROPollState)
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="2207e-118">Restaurar un LROPoller desde el LROPollState proporcionado.</span><span class="sxs-lookup"><span data-stu-id="2207e-118">Restore an LROPoller from the provided LROPollState.</span></span> <span data-ttu-id="2207e-119">Este método puede utilizarse para volver a crear un LROPoller en una máquina o un proceso diferente.</span><span class="sxs-lookup"><span data-stu-id="2207e-119">This method can be used to recreate an LROPoller on a different process or machine.</span></span>
    syntax:
      content: 'function restoreLROPoller(lroPollState: LROPollState)'
      parameters:
        - id: lroPollState
          type:
            - LROPollState
          description: ''
      return:
        type:
          - LROPoller
    package: '@azure/arm-cognitiveservices'
  - uid: '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.sendLongRunningRequest'
    name: 'sendLongRunningRequest(RequestPrepareOptions | WebResource, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="2207e-120">Proporciona un mecanismo para realizar una solicitud que se sondean y proporcionará el resultado final.</span><span class="sxs-lookup"><span data-stu-id="2207e-120">Provides a mechanism to make a request that will poll and provide the final result.</span></span>
    syntax:
      content: 'function sendLongRunningRequest(request: RequestPrepareOptions | WebResource, options?: RequestOptionsBase)'
      parameters:
        - id: request
          type:
            - RequestPrepareOptions | WebResource
          description: <span data-ttu-id="2207e-121">El objeto de solicitud</span><span class="sxs-lookup"><span data-stu-id="2207e-121">The request object</span></span>
        - id: options
          type:
            - RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<HttpOperationResponse>
    package: '@azure/arm-cognitiveservices'
  - uid: '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.sendLRORequest'
    name: 'sendLRORequest(OperationArguments, OperationSpec, RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="2207e-122">Enviar la solicitud inicial de un LRO (larga ejecución como operación) y obtener un LROPoller que proporciona métodos para sondear el LRO y comprobar si el LRO finalizada.</span><span class="sxs-lookup"><span data-stu-id="2207e-122">Send the initial request of a LRO (long running operation) and get back an LROPoller that provides methods for polling the LRO and checking if the LRO is finished.</span></span>
    syntax:
      content: 'function sendLRORequest(operationArguments: OperationArguments, operationSpec: OperationSpec, options?: RequestOptionsBase)'
      parameters:
        - id: operationArguments
          type:
            - OperationArguments
          description: <span data-ttu-id="2207e-123">Los argumentos para la operación.</span><span class="sxs-lookup"><span data-stu-id="2207e-123">The arguments to the operation.</span></span>
        - id: operationSpec
          type:
            - OperationSpec
          description: <span data-ttu-id="2207e-124">La especificación para la operación.</span><span class="sxs-lookup"><span data-stu-id="2207e-124">The specification for the operation.</span></span>
        - id: options
          type:
            - RequestOptionsBase
          description: <span data-ttu-id="2207e-125">Opciones adicionales para enviarse al realizar la solicitud.</span><span class="sxs-lookup"><span data-stu-id="2207e-125">Additional options to be sent while making the request.</span></span>
          optional: true
      return:
        type:
          - Promise<LROPoller>
    package: '@azure/arm-cognitiveservices'
  - uid: '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.sendOperationRequest'
    name: 'sendOperationRequest(OperationArguments, OperationSpec, ServiceCallback<any>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="2207e-126">Enviar una solicitud HTTP que se rellena con el OperationSpec proporcionado.</span><span class="sxs-lookup"><span data-stu-id="2207e-126">Send an HTTP request that is populated using the provided OperationSpec.</span></span>
    syntax:
      content: 'function sendOperationRequest(operationArguments: OperationArguments, operationSpec: OperationSpec, callback?: ServiceCallback<any>)'
      parameters:
        - id: operationArguments
          type:
            - OperationArguments
          description: <span data-ttu-id="2207e-127">Los argumentos que se rellenarán los valores de la solicitud HTTP con plantillas de.</span><span class="sxs-lookup"><span data-stu-id="2207e-127">The arguments that the HTTP request's templated values will be populated from.</span></span>
        - id: operationSpec
          type:
            - OperationSpec
          description: <span data-ttu-id="2207e-128">OperationSpec debe usar para rellenar la solicitud HTTP.</span><span class="sxs-lookup"><span data-stu-id="2207e-128">The OperationSpec to use to populate the httpRequest.</span></span>
        - id: callback
          type:
            - ServiceCallback<any>
          description: |
            <span data-ttu-id="2207e-129">La devolución de llamada cuando se recibe la respuesta.</span><span class="sxs-lookup"><span data-stu-id="2207e-129">The callback to call when the response is received.</span></span>
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/arm-cognitiveservices'
  - uid: '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.sendRequest'
    name: sendRequest(RequestPrepareOptions | WebResource)
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="2207e-130">Enviar la solicitud HTTP proporcionada.</span><span class="sxs-lookup"><span data-stu-id="2207e-130">Send the provided httpRequest.</span></span>
    syntax:
      content: 'function sendRequest(options: RequestPrepareOptions | WebResource)'
      parameters:
        - id: options
          type:
            - RequestPrepareOptions | WebResource
          description: ''
      return:
        type:
          - Promise<HttpOperationResponse>
    package: '@azure/arm-cognitiveservices'
  - uid: '@azure/arm-cognitiveservices.CognitiveServicesManagementClient.subscriptionId'
    name: subscriptionId
    fullName: subscriptionId
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'subscriptionId: string'
      return:
        type:
          - string
    package: '@azure/arm-cognitiveservices'
references:
  - uid: '@azure/arm-cognitiveservices.CognitiveServicesManagementClientContext'
    name: CognitiveServicesManagementClientContext
    spec.typeScript:
      - name: CognitiveServicesManagementClientContext
        fullName: CognitiveServicesManagementClientContext
        uid: '@azure/arm-cognitiveservices.CognitiveServicesManagementClientContext'
  - uid: '@azure/arm-cognitiveservices.Accounts'
    name: Accounts
    spec.typeScript:
      - name: Accounts
        fullName: Accounts
        uid: '@azure/arm-cognitiveservices.Accounts'
  - uid: '@azure/arm-cognitiveservices.CheckSkuAvailability'
    name: CheckSkuAvailability
    spec.typeScript:
      - name: CheckSkuAvailability
        fullName: CheckSkuAvailability
        uid: '@azure/arm-cognitiveservices.CheckSkuAvailability'
  - uid: '@azure/arm-cognitiveservices.Operations'
    name: Operations
    spec.typeScript:
      - name: Operations
        fullName: Operations
        uid: '@azure/arm-cognitiveservices.Operations'
  - uid: '@azure/arm-cognitiveservices.ResourceSkus'
    name: ResourceSkus
    spec.typeScript:
      - name: ResourceSkus
        fullName: ResourceSkus
        uid: '@azure/arm-cognitiveservices.ResourceSkus'
  - uid: ServiceCallback<@azure/arm-cognitiveservices.CheckDomainAvailabilityResult>
    name: CheckDomainAvailabilityResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: CheckDomainAvailabilityResult
        fullName: CheckDomainAvailabilityResult
        uid: '@azure/arm-cognitiveservices.CheckDomainAvailabilityResult'
      - name: '>'
        fullName: '>'
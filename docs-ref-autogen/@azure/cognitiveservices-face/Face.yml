### YamlMime:UniversalReference
items:
  - uid: '@azure/cognitiveservices-face.Face'
    name: Face
    fullName: Face
    children:
      - '@azure/cognitiveservices-face.Face.detectWithStream_2'
      - '@azure/cognitiveservices-face.Face.detectWithStream'
      - '@azure/cognitiveservices-face.Face.detectWithStream_1'
      - '@azure/cognitiveservices-face.Face.detectWithUrl_2'
      - '@azure/cognitiveservices-face.Face.detectWithUrl'
      - '@azure/cognitiveservices-face.Face.detectWithUrl_1'
      - '@azure/cognitiveservices-face.Face.constructor'
      - '@azure/cognitiveservices-face.Face.findSimilar_2'
      - '@azure/cognitiveservices-face.Face.findSimilar'
      - '@azure/cognitiveservices-face.Face.findSimilar_1'
      - '@azure/cognitiveservices-face.Face.group'
      - '@azure/cognitiveservices-face.Face.group_2'
      - '@azure/cognitiveservices-face.Face.group_1'
      - '@azure/cognitiveservices-face.Face.identify_2'
      - '@azure/cognitiveservices-face.Face.identify'
      - '@azure/cognitiveservices-face.Face.identify_1'
      - '@azure/cognitiveservices-face.Face.verifyFaceToFace'
      - '@azure/cognitiveservices-face.Face.verifyFaceToFace_2'
      - '@azure/cognitiveservices-face.Face.verifyFaceToFace_1'
      - '@azure/cognitiveservices-face.Face.verifyFaceToPerson_2'
      - '@azure/cognitiveservices-face.Face.verifyFaceToPerson'
      - '@azure/cognitiveservices-face.Face.verifyFaceToPerson_1'
    langs:
      - typeScript
    type: class
    summary: Clase que representa una cara.
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithStream_2'
    name: 'detectWithStream(msRest.HttpRequestBody, FaceDetectWithStreamOptionalParams, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithStream(image: msRest.HttpRequestBody, options: FaceDetectWithStreamOptionalParams, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: Una secuencia de imagen.
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceDetectWithStreamOptionalParams'
          description: Los parámetros opcionales
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.FaceDetectWithStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithStream'
    name: 'detectWithStream(msRest.HttpRequestBody, Models.FaceDetectWithStreamOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Detecte caras humanas en una imagen y devuelve las ubicaciones de cara y opcionalmente con faceIds, puntos de referencia y atributos.'
    syntax:
      content: 'function detectWithStream(image: msRest.HttpRequestBody, options?: Models.FaceDetectWithStreamOptionalParams)'
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: Una secuencia de imagen.
        - id: options
          type:
            - Models.FaceDetectWithStreamOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceDetectWithStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithStream_1'
    name: 'detectWithStream(msRest.HttpRequestBody, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithStream(image: msRest.HttpRequestBody, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: image
          type:
            - msRest.HttpRequestBody
          description: Una secuencia de imagen.
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.FaceDetectWithStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithUrl_2'
    name: 'detectWithUrl(string, FaceDetectWithUrlOptionalParams, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithUrl(url: string, options: FaceDetectWithUrlOptionalParams, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: url
          type:
            - string
          description: Dirección URL accesible públicamente de una imagen
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceDetectWithUrlOptionalParams'
          description: Los parámetros opcionales
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.FaceDetectWithUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithUrl'
    name: 'detectWithUrl(string, Models.FaceDetectWithUrlOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Detecte caras humanas en una imagen, los rectángulos de caras devuelto y opcionalmente con faceIds, puntos de referencia y atributos.<br />
      * Parámetros opcionales como faceId, puntos de referencia y atributos. Atributos incluyen la edad, sexo, headPose, sonrisa, facialHair, gafas, emotion, pelo, composición, oclusión, Accesorios, desenfoque, exposición y ruido.
      * La característica extraídos de cara, en lugar de la imagen real, se almacenarán en el servidor. El faceId es un identificador de la característica de cara y se usará en [enfrentan: identificación de](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239), [enfrentan: comprobación de](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a)y [cara
      - Buscar Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). Fecha de vencimiento 24 horas después de la llamada de detección.
      * Calidad de imagen de cara superior significa mejor detección y la precisión del reconocimiento. Considere la posibilidad de caras de alta calidad: frontal, clear y cara tamaño es de 200 x 200 píxeles (100 píxeles entre los ojos) o mayor.
      * Se admiten JPEG, PNG, GIF (el primer fotograma) y el formato BMP. El tamaño del archivo de imagen permitido es de 1KB a 6MB.
      * Las caras son detectables cuando su tamaño es de 36 x 36 a 4096 × 4096 píxeles. Si necesita detectar caras muy pequeñas, pero no cifradas, vuelva a intentar ampliar la imagen de entrada.
      * Hasta 64 caras se pueden devolver para una imagen. Caras se clasifican según el tamaño del rectángulo de cara de grande a pequeño.
      * Detector de caras prefieren caras frontales y de frente cercanas. Hay casos en los que no pueden ser caras ángulos de cara detectadas, por ejemplo, excepcionalmente grandes (poses) o que se va a ocluidos u orientación de la imagen incorrecta.
      * Atributos (edad, sexo, headPose, sonrisa, facialHair, gafas, emotion, pelo, composición, oclusión, Accesorios, desenfoque, exposición y ruido) no pueden ser perfectamente exactas. Valor de paso de HeadPose es un campo reservado y siempre devolverá 0.
      * Se proporcionan valores diferentes 'recognitionModel'. Si las operaciones de seguimiento como Verify, identificar, buscar similares son necesarios, especifique el modelo de reconocimiento con el parámetro 'recognitionModel'. El valor predeterminado de 'recognitionModel' es 'recognition_01', si el modelo más reciente es necesario, especifique explícitamente el modelo que necesita en este parámetro. Una vez que se especifica, se asociará el faceIds detectado con el modelo de reconocimiento especificado. Obtener más información, consulte [cómo especificar un modelo de reconocimiento](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model)
    syntax:
      content: 'function detectWithUrl(url: string, options?: Models.FaceDetectWithUrlOptionalParams)'
      parameters:
        - id: url
          type:
            - string
          description: Dirección URL accesible públicamente de una imagen
        - id: options
          type:
            - Models.FaceDetectWithUrlOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceDetectWithUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.detectWithUrl_1'
    name: 'detectWithUrl(string, ServiceCallback<DetectedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function detectWithUrl(url: string, callback: ServiceCallback<DetectedFace[]>)'
      parameters:
        - id: url
          type:
            - string
          description: Dirección URL accesible públicamente de una imagen
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.FaceDetectWithUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.constructor'
    name: Face(FaceClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Creación de una cara.
    syntax:
      content: 'new Face(client: FaceClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/cognitiveservices-face.FaceClientContext'
          description: |
            Referencia para el cliente del servicio.
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.findSimilar_2'
    name: 'findSimilar(string, FaceFindSimilarOptionalParams, ServiceCallback<SimilarFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function findSimilar(faceId: string, options: FaceFindSimilarOptionalParams, callback: ServiceCallback<SimilarFace[]>)'
      parameters:
        - id: faceId
          type:
            - string
          description: 'FaceId de la cara de la consulta. Usuario debe llamar a Face: detectar primero para obtener un faceId válido. Tenga en cuenta que este faceId no se conserva y expirará en 24 horas después de la llamada de detección'
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceFindSimilarOptionalParams'
          description: Los parámetros opcionales
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.SimilarFace[]>'
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.FaceFindSimilarResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.findSimilar'
    name: 'findSimilar(string, Models.FaceFindSimilarOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Dado faceId de cara de la consulta, para buscar las caras parecidas desde una matriz faceId, una lista de caras o una lista de caras de gran tamaño. faceId matriz contiene las caras creadas por [enfrentan: detectar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), que caducará 24 horas después de su creación. Crea un "faceListId" [FaceList - crear](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b) que contiene persistedFaceIds que no caduca. Y lo crea un "largeFaceListId" [LargeFaceList - crear](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc) que contiene persistedFaceIds que también no caduca. Dependiendo de la entrada de la lista de caras similares devuelta contiene faceIds o persistedFaceIds clasificados por similitud.
      <br/>Buscar similar tiene dos modos de funcionamiento, "matchPerson" y "matchFace". "matchPerson" es el modo predeterminado que intenta encontrar caras de la misma persona como sea posible mediante el uso internos umbrales de la misma persona. Es útil buscar un conocido otras fotografías de la persona. Tenga en cuenta que se devolverá una lista vacía si ninguna de las caras superan los umbrales internos. modo de "matchFace" omite los umbrales de la misma persona y devuelve clasificados caras similares de todos modos, incluso la similitud es baja. Se puede usar en los casos, como la búsqueda de caras busca de famosos.
      <br/>Asociado con faceId de la cara consulta 'recognitionModel' debe ser el mismo que el utilizado por la matriz de destino faceId, lista de caras o cara grandes 'recognitionModel'.
    syntax:
      content: 'function findSimilar(faceId: string, options?: Models.FaceFindSimilarOptionalParams)'
      parameters:
        - id: faceId
          type:
            - string
          description: 'FaceId de la cara de la consulta. Usuario debe llamar a Face: detectar primero para obtener un faceId válido. Tenga en cuenta que este faceId no se conserva y expirará en 24 horas después de la llamada de detección'
        - id: options
          type:
            - Models.FaceFindSimilarOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceFindSimilarResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.findSimilar_1'
    name: 'findSimilar(string, ServiceCallback<SimilarFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function findSimilar(faceId: string, callback: ServiceCallback<SimilarFace[]>)'
      parameters:
        - id: faceId
          type:
            - string
          description: 'FaceId de la cara de la consulta. Usuario debe llamar a Face: detectar primero para obtener un faceId válido. Tenga en cuenta que este faceId no se conserva y expirará en 24 horas después de la llamada de detección'
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.SimilarFace[]>'
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.FaceFindSimilarResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.group'
    name: 'group(string[], msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Dividir las caras de candidato en grupos en función de similitud de cara.<br />
      * El resultado es un messyGroup y uno o más grupos separados. Un grupo de caras contiene las caras que tienen similar examinar, a menudo de la misma persona. Grupos se clasifican según el tamaño del grupo, es decir, el número de caras. Tenga en cuenta que las caras que pertenecen a una misma persona podrían dividirse en varios grupos en el resultado.
      * MessyGroup es un grupo de caras especial que contiene las caras que no se pueden encontrar ninguna cara homólogo similar de caras originales. El messyGroup no aparecerá en el resultado si sus homólogos no encuentra todas las caras.
      * API del grupo necesita al menos 2 caras de candidato y 1000 como máximo. Se recomienda para probar [enfrentan: comprobación de](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a) cuando solo tiene 2 caras de candidato.
      * El asociado faceIds las caras de la consulta 'recognitionModel' debe ser el mismo.
    syntax:
      content: 'function group(faceIds: string[], options?: msRest.RequestOptionsBase)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: 'Matriz de candidato faceId creado por cara: detectar. El valor máximo es 1000 caras'
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceGroupResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.group_2'
    name: 'group(string[], RequestOptionsBase, ServiceCallback<GroupResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function group(faceIds: string[], options: RequestOptionsBase, callback: ServiceCallback<GroupResult>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: 'Matriz de candidato faceId creado por cara: detectar. El valor máximo es 1000 caras'
        - id: options
          type:
            - RequestOptionsBase
          description: Los parámetros opcionales
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.GroupResult>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.FaceGroupResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.group_1'
    name: 'group(string[], ServiceCallback<GroupResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function group(faceIds: string[], callback: ServiceCallback<GroupResult>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: 'Matriz de candidato faceId creado por cara: detectar. El valor máximo es 1000 caras'
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.GroupResult>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.FaceGroupResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.identify_2'
    name: 'identify(string[], FaceIdentifyOptionalParams, ServiceCallback<IdentifyResult[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function identify(faceIds: string[], options: FaceIdentifyOptionalParams, callback: ServiceCallback<IdentifyResult[]>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: 'Matriz de consulta enfrenta a faceIds, creado por la cara: detectar. Cada una de las caras se identifican de forma independiente. El número de faceIds válido está comprendido entre [1, 10].'
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceIdentifyOptionalParams'
          description: Los parámetros opcionales
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.IdentifyResult[]>'
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.FaceIdentifyResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.identify'
    name: 'identify(string[], Models.FaceIdentifyOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      identificación de 1 a varios para encontrar a las coincidencias más cercano de la cara de la persona consulta específica de un grupo de persona o grupo grande de person.
      <br/> Para cada cara de la matriz faceIds, identifique caras calculará similitudes entre la cara de la consulta y todas las caras en el grupo de la persona (proporcionada por personGroupId) o persona grande agrupar (determinado por largePersonGroupId) y devolver el candidato personas para que se enfrentan clasificado por confianza similitud. La persona del grupo de persona grupo/grandes se debe entrenar a prepararla para la identificación. Obtenga más información en [grupo de personas - Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249) y [LargePersonGroup - Train](/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4).
      <br/>
      Comentarios:<br />
      * El algoritmo permite más de una cara pueda identificarse de forma independiente en la misma solicitud, pero no más de 10 caras.
      * Cada persona en el grupo de grupo/grandes persona persona podría tener más de una cara, pero no más de 248 caras.
      * Calidad de imagen de cara superior significa mejorar la precisión de identificación. Considere la posibilidad de caras de alta calidad: frontal, clear y cara tamaño es de 200 x 200 píxeles (100 píxeles entre los ojos) o mayor.
      * Número de candidatos devuelto está restringido por maxNumOfCandidatesReturned y confidenceThreshold. Si no se identifica ninguna persona, los candidatos devueltos será una matriz vacía.
      * Pruebe [cara - buscar Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237) cuando necesite encontrar caras parecidas en una lista de caras lista o grandes cara en lugar de un grupo de grupo/grandes persona persona.
      * 'RecognitionModel' asociado con faceIds las caras de la consulta debe ser el mismo que el utilizado por el grupo de destino persona o grupo de persona grandes 'recognitionModel'.
    syntax:
      content: 'function identify(faceIds: string[], options?: Models.FaceIdentifyOptionalParams)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: 'Matriz de consulta enfrenta a faceIds, creado por la cara: detectar. Cada una de las caras se identifican de forma independiente. El número de faceIds válido está comprendido entre [1, 10].'
        - id: options
          type:
            - Models.FaceIdentifyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceIdentifyResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.identify_1'
    name: 'identify(string[], ServiceCallback<IdentifyResult[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function identify(faceIds: string[], callback: ServiceCallback<IdentifyResult[]>)'
      parameters:
        - id: faceIds
          type:
            - 'string[]'
          description: 'Matriz de consulta enfrenta a faceIds, creado por la cara: detectar. Cada una de las caras se identifican de forma independiente. El número de faceIds válido está comprendido entre [1, 10].'
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.IdentifyResult[]>'
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.FaceIdentifyResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToFace'
    name: 'verifyFaceToFace(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Compruebe si dos caras pertenecen a una misma persona o si una cara pertenece a una persona.
      <br/>
      Comentarios:<br />
      * Calidad de imagen de cara superior significa mejorar la precisión de identificación. Considere la posibilidad de caras de alta calidad: frontal, clear y cara tamaño es de 200 x 200 píxeles (100 píxeles entre los ojos) o mayor.
      * Asegúrese de su propio juicio para los escenarios que son sensibles a la precisión.
      * 'RecognitionModel' asociado con faceIds las caras de la consulta debe ser el mismo que el utilizado por la cara de destino, persona o grupo persona grandes 'recognitionModel'.
    syntax:
      content: 'function verifyFaceToFace(faceId1: string, faceId2: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: faceId1
          type:
            - string
          description: 'faceId de la primera cara, procede de caras: detectar'
        - id: faceId2
          type:
            - string
          description: 'faceId de la cara de la segunda, procede de caras: detectar'
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceVerifyFaceToFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToFace_2'
    name: 'verifyFaceToFace(string, string, RequestOptionsBase, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToFace(faceId1: string, faceId2: string, options: RequestOptionsBase, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId1
          type:
            - string
          description: 'faceId de la primera cara, procede de caras: detectar'
        - id: faceId2
          type:
            - string
          description: 'faceId de la cara de la segunda, procede de caras: detectar'
        - id: options
          type:
            - RequestOptionsBase
          description: Los parámetros opcionales
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.FaceVerifyFaceToFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToFace_1'
    name: 'verifyFaceToFace(string, string, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToFace(faceId1: string, faceId2: string, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId1
          type:
            - string
          description: 'faceId de la primera cara, procede de caras: detectar'
        - id: faceId2
          type:
            - string
          description: 'faceId de la cara de la segunda, procede de caras: detectar'
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.FaceVerifyFaceToFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToPerson_2'
    name: 'verifyFaceToPerson(string, string, FaceVerifyFaceToPersonOptionalParams, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToPerson(faceId: string, personId: string, options: FaceVerifyFaceToPersonOptionalParams, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId
          type:
            - string
          description: 'FaceId de la cara, procede de caras: detectar'
        - id: personId
          type:
            - string
          description: 'Especifique a una persona concreta en un grupo de persona o un grupo grande de persona. personId se crea en el grupo de personas persona: cree o persona LargePersonGroup.'
        - id: options
          type:
            - '@azure/cognitiveservices-face.FaceVerifyFaceToPersonOptionalParams'
          description: Los parámetros opcionales
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.FaceVerifyFaceToPersonResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToPerson'
    name: 'verifyFaceToPerson(string, string, Models.FaceVerifyFaceToPersonOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Compruebe si las dos caras pertenecen a una misma persona. Compara una cara Id con un Id. de persona
    syntax:
      content: 'function verifyFaceToPerson(faceId: string, personId: string, options?: Models.FaceVerifyFaceToPersonOptionalParams)'
      parameters:
        - id: faceId
          type:
            - string
          description: 'FaceId de la cara, procede de caras: detectar'
        - id: personId
          type:
            - string
          description: 'Especifique a una persona concreta en un grupo de persona o un grupo grande de persona. personId se crea en el grupo de personas persona: cree o persona LargePersonGroup.'
        - id: options
          type:
            - Models.FaceVerifyFaceToPersonOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.FaceVerifyFaceToPersonResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.Face.verifyFaceToPerson_1'
    name: 'verifyFaceToPerson(string, string, ServiceCallback<VerifyResult>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function verifyFaceToPerson(faceId: string, personId: string, callback: ServiceCallback<VerifyResult>)'
      parameters:
        - id: faceId
          type:
            - string
          description: 'FaceId de la cara, procede de caras: detectar'
        - id: personId
          type:
            - string
          description: 'Especifique a una persona concreta en un grupo de persona o un grupo grande de persona. personId se crea en el grupo de personas persona: cree o persona LargePersonGroup.'
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.FaceVerifyFaceToPersonResponse>
    package: '@azure/cognitiveservices-face'
references:
  - uid: '@azure/cognitiveservices-face.FaceClientContext'
    name: FaceClientContext
    spec.typeScript:
      - name: FaceClientContext
        fullName: FaceClientContext
        uid: '@azure/cognitiveservices-face.FaceClientContext'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.DetectedFace[]>'
    name: 'DetectedFace[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: DetectedFace
        fullName: DetectedFace
        uid: '@azure/cognitiveservices-face.DetectedFace'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceDetectWithStreamOptionalParams'
    name: FaceDetectWithStreamOptionalParams
    spec.typeScript:
      - name: FaceDetectWithStreamOptionalParams
        fullName: FaceDetectWithStreamOptionalParams
        uid: '@azure/cognitiveservices-face.FaceDetectWithStreamOptionalParams'
  - uid: '@azure/cognitiveservices-face.FaceDetectWithUrlOptionalParams'
    name: FaceDetectWithUrlOptionalParams
    spec.typeScript:
      - name: FaceDetectWithUrlOptionalParams
        fullName: FaceDetectWithUrlOptionalParams
        uid: '@azure/cognitiveservices-face.FaceDetectWithUrlOptionalParams'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.SimilarFace[]>'
    name: 'SimilarFace[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SimilarFace
        fullName: SimilarFace
        uid: '@azure/cognitiveservices-face.SimilarFace'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceFindSimilarOptionalParams'
    name: FaceFindSimilarOptionalParams
    spec.typeScript:
      - name: FaceFindSimilarOptionalParams
        fullName: FaceFindSimilarOptionalParams
        uid: '@azure/cognitiveservices-face.FaceFindSimilarOptionalParams'
  - uid: ServiceCallback<@azure/cognitiveservices-face.GroupResult>
    name: GroupResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: GroupResult
        fullName: GroupResult
        uid: '@azure/cognitiveservices-face.GroupResult'
      - name: '>'
        fullName: '>'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.IdentifyResult[]>'
    name: 'IdentifyResult[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: IdentifyResult
        fullName: IdentifyResult
        uid: '@azure/cognitiveservices-face.IdentifyResult'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.FaceIdentifyOptionalParams'
    name: FaceIdentifyOptionalParams
    spec.typeScript:
      - name: FaceIdentifyOptionalParams
        fullName: FaceIdentifyOptionalParams
        uid: '@azure/cognitiveservices-face.FaceIdentifyOptionalParams'
  - uid: ServiceCallback<@azure/cognitiveservices-face.VerifyResult>
    name: VerifyResult>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: VerifyResult
        fullName: VerifyResult
        uid: '@azure/cognitiveservices-face.VerifyResult'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cognitiveservices-face.FaceVerifyFaceToPersonOptionalParams'
    name: FaceVerifyFaceToPersonOptionalParams
    spec.typeScript:
      - name: FaceVerifyFaceToPersonOptionalParams
        fullName: FaceVerifyFaceToPersonOptionalParams
        uid: '@azure/cognitiveservices-face.FaceVerifyFaceToPersonOptionalParams'
### YamlMime:UniversalReference
items:
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations'
    name: LargeFaceListOperations
    fullName: LargeFaceListOperations
    children:
      - '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromStream_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromStream'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromStream_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromUrl_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromUrl'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromUrl_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.create_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.create'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.create_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.deleteFace'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.deleteFace_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.deleteFace_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.deleteMethod'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.deleteMethod_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.deleteMethod_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.get_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.get'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.get_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.getFace'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.getFace_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.getFace_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.getTrainingStatus'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.getTrainingStatus_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.getTrainingStatus_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.constructor'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.list_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.list'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.list_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.listFaces_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.listFaces'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.listFaces_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.train'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.train_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.train_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.update_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.update'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.update_1'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.updateFace_2'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.updateFace'
      - '@azure/cognitiveservices-face.LargeFaceListOperations.updateFace_1'
    langs:
      - typeScript
    type: class
    summary: Clase que representa un LargeFaceListOperations.
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromStream_2'
    name: 'addFaceFromStream(string, msRest.HttpRequestBody, LargeFaceListAddFaceFromStreamOptionalParams, ServiceCallback<PersistedFace>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addFaceFromStream(largeFaceListId: string, image: msRest.HttpRequestBody, options: LargeFaceListAddFaceFromStreamOptionalParams, callback: ServiceCallback<PersistedFace>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: image
          type:
            - msRest.HttpRequestBody
          description: Una secuencia de imagen.
        - id: options
          type:
            - '@azure/cognitiveservices-face.LargeFaceListAddFaceFromStreamOptionalParams'
          description: Los parámetros opcionales
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.LargeFaceListAddFaceFromStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromStream'
    name: 'addFaceFromStream(string, msRest.HttpRequestBody, Models.LargeFaceListAddFaceFromStreamOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Agregar una cara a una lista de fuente grandes especificado, hasta 1 000 000 caras.
      <br /> Para tratar con una imagen que contenga varias caras, la cara de entrada se puede especificar como una imagen con un rectángulo targetFace. Devuelve un persistedFaceId que representa la imagen se ha agregado. No hay ninguna imagen se almacenará. Solo la característica de cara extraídos se almacenarán en el servidor hasta que [cara LargeFaceList - eliminar](/docs/services/563879b61984550e40cbbe8d/operations/5a158c8ad2de3616c086f2d4) o [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) se llama.
      <br /> Tenga en cuenta persistedFaceId es diferente de faceId generado por [enfrentan: detectar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
      * Mayor calidad de imagen de cara significa mejorar la precisión de reconocimiento. Considere la posibilidad de caras de alta calidad: frontal, clear y cara tamaño es de 200 x 200 píxeles (100 píxeles entre los ojos) o mayor.
      * Se admiten JPEG, PNG, GIF (el primer fotograma) y el formato BMP. El tamaño del archivo de imagen permitido es de 1KB a 6MB.
      * rectángulo "targetFace" debe contener una cara. Cero o varias caras se considerarán como un error. Si no se devuelve el rectángulo proporcionado "targetFace" de [enfrentan: detectar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), no hay ninguna garantía para detectar y agregar la cara correctamente.
      * Fuera del tamaño de cara detectable (36 x 36-4096 x 4096 píxeles), grandes occlusions poses o grandes, producirán errores.
      * Agregar o eliminar caras de una misma lista de caras se procesan secuencialmente y de cara diferentes listas se encuentran en paralelo.
      * El tamaño mínimo de cara detectable es 36 x 36 píxeles en una imagen no superior a 1920 x 1080 píxeles.
      Las imágenes con dimensiones superiores a 1920 x 1080 píxeles tendrá un tamaño mínimo de cara proporcionalmente mayor.
      * Se pueden proporcionar valores diferentes 'detectionModel'. Para usar y comparar los modelos de detección diferente, consulte [cómo especificar un modelo de detección](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
      | Modelo | Uso recomendado-case(s) |
      | ---------- | -------- |
      | 'detection_01': | El modelo de detección predeterminado para [LargeFaceList - agregar
      Face](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3). Se recomienda para cerca de la detección de caras frontales. Para escenarios con caras de ángulo excepcionalmente grandes (poses), caras ocluidas u orientación de la imagen incorrecta, no se pueden detectar las caras en estos casos. | | 'detection_02': | Es posible que un modelo de detección publicada en 2019 con una mayor precisión, especialmente en las caras pequeñas, en paralelo y borrosas. | Cuota:
      * Cuota de suscripción del nivel gratuito: 1000 caras por lista de caras de gran tamaño.
      * Cuota de suscripción del nivel s0: 1.000.000 caras por lista de caras de gran tamaño.
    syntax:
      content: 'function addFaceFromStream(largeFaceListId: string, image: msRest.HttpRequestBody, options?: Models.LargeFaceListAddFaceFromStreamOptionalParams)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: image
          type:
            - msRest.HttpRequestBody
          description: Una secuencia de imagen.
        - id: options
          type:
            - Models.LargeFaceListAddFaceFromStreamOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.LargeFaceListAddFaceFromStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromStream_1'
    name: 'addFaceFromStream(string, msRest.HttpRequestBody, ServiceCallback<PersistedFace>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addFaceFromStream(largeFaceListId: string, image: msRest.HttpRequestBody, callback: ServiceCallback<PersistedFace>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: image
          type:
            - msRest.HttpRequestBody
          description: Una secuencia de imagen.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.LargeFaceListAddFaceFromStreamResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromUrl_2'
    name: 'addFaceFromUrl(string, string, LargeFaceListAddFaceFromUrlOptionalParams, ServiceCallback<PersistedFace>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addFaceFromUrl(largeFaceListId: string, url: string, options: LargeFaceListAddFaceFromUrlOptionalParams, callback: ServiceCallback<PersistedFace>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: url
          type:
            - string
          description: Dirección URL accesible públicamente de una imagen
        - id: options
          type:
            - '@azure/cognitiveservices-face.LargeFaceListAddFaceFromUrlOptionalParams'
          description: Los parámetros opcionales
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.LargeFaceListAddFaceFromUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromUrl'
    name: 'addFaceFromUrl(string, string, Models.LargeFaceListAddFaceFromUrlOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Agregar una cara a una lista de fuente grandes especificado, hasta 1 000 000 caras.
      <br /> Para tratar con una imagen que contenga varias caras, la cara de entrada se puede especificar como una imagen con un rectángulo targetFace. Devuelve un persistedFaceId que representa la imagen se ha agregado. No hay ninguna imagen se almacenará. Solo la característica de cara extraídos se almacenarán en el servidor hasta que [cara LargeFaceList - eliminar](/docs/services/563879b61984550e40cbbe8d/operations/5a158c8ad2de3616c086f2d4) o [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) se llama.
      <br /> Tenga en cuenta persistedFaceId es diferente de faceId generado por [enfrentan: detectar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236).
      * Mayor calidad de imagen de cara significa mejorar la precisión de reconocimiento. Considere la posibilidad de caras de alta calidad: frontal, clear y cara tamaño es de 200 x 200 píxeles (100 píxeles entre los ojos) o mayor.
      * Se admiten JPEG, PNG, GIF (el primer fotograma) y el formato BMP. El tamaño del archivo de imagen permitido es de 1KB a 6MB.
      * rectángulo "targetFace" debe contener una cara. Cero o varias caras se considerarán como un error. Si no se devuelve el rectángulo proporcionado "targetFace" de [enfrentan: detectar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236), no hay ninguna garantía para detectar y agregar la cara correctamente.
      * Fuera del tamaño de cara detectable (36 x 36-4096 x 4096 píxeles), grandes occlusions poses o grandes, producirán errores.
      * Agregar o eliminar caras de una misma lista de caras se procesan secuencialmente y de cara diferentes listas se encuentran en paralelo.
      * El tamaño mínimo de cara detectable es 36 x 36 píxeles en una imagen no superior a 1920 x 1080 píxeles.
      Las imágenes con dimensiones superiores a 1920 x 1080 píxeles tendrá un tamaño mínimo de cara proporcionalmente mayor.
      * Se pueden proporcionar valores diferentes 'detectionModel'. Para usar y comparar los modelos de detección diferente, consulte [cómo especificar un modelo de detección](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model)
      | Modelo | Uso recomendado-case(s) |
      | ---------- | -------- |
      | 'detection_01': | El modelo de detección predeterminado para [LargeFaceList - agregar
      Face](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3). Se recomienda para cerca de la detección de caras frontales. Para escenarios con caras de ángulo excepcionalmente grandes (poses), caras ocluidas u orientación de la imagen incorrecta, no se pueden detectar las caras en estos casos. | | 'detection_02': | Es posible que un modelo de detección publicada en 2019 con una mayor precisión, especialmente en las caras pequeñas, en paralelo y borrosas. | Cuota:
      * Cuota de suscripción del nivel gratuito: 1000 caras por lista de caras de gran tamaño.
      * Cuota de suscripción del nivel s0: 1.000.000 caras por lista de caras de gran tamaño.
    syntax:
      content: 'function addFaceFromUrl(largeFaceListId: string, url: string, options?: Models.LargeFaceListAddFaceFromUrlOptionalParams)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: url
          type:
            - string
          description: Dirección URL accesible públicamente de una imagen
        - id: options
          type:
            - Models.LargeFaceListAddFaceFromUrlOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.LargeFaceListAddFaceFromUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.addFaceFromUrl_1'
    name: 'addFaceFromUrl(string, string, ServiceCallback<PersistedFace>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function addFaceFromUrl(largeFaceListId: string, url: string, callback: ServiceCallback<PersistedFace>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: url
          type:
            - string
          description: Dirección URL accesible públicamente de una imagen
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.LargeFaceListAddFaceFromUrlResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.create_2'
    name: 'create(string, LargeFaceListCreateOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function create(largeFaceListId: string, options: LargeFaceListCreateOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: options
          type:
            - '@azure/cognitiveservices-face.LargeFaceListCreateOptionalParams'
          description: Los parámetros opcionales
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.create'
    name: 'create(string, Models.LargeFaceListCreateOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Crear una lista de caras grande vacío con largeFaceListId especificado por el usuario, el nombre, un recognitionModel y userData opcional.
      <br /> Lista de caras grande es una lista de caras, hasta 1 000 000 caras y usando [cara - buscar Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
      <br /> Después de la creación, el usuario debe usar [cara LargeFaceList - agregar](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3) para importar las caras y [LargeFaceList - Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1) para prepararla para [cara - buscar Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237). No hay ninguna imagen se almacenará. Solo las características de cara extraídos se almacenan en el servidor hasta que [LargeFaceList - Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd) se llama.
      <br /> Buscar que similar se utiliza para el escenario como encontrar caras similar a celebridades, caras similares filtrado, o como una luz cierto enfrenta identificación. Pero si es el uso real para identificar la persona, use [grupo de personas](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244) /
      [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d) y [enfrentan: identificación de](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
      <br/>'recognitionModel' debe especificarse para asociar a esta lista de caras de gran tamaño. El valor predeterminado de 'recognitionModel' es 'recognition_01', si el modelo más reciente es necesario, especifique explícitamente el modelo que necesita en este parámetro. Las caras nuevas que se agregan a una lista de caras grande existente usará el modelo de reconocimiento que ya está asociado con la colección. No se puede actualizar las características existentes de cara en una lista grande de cara a las características extraídas por otra versión del modelo de reconocimiento.
      * 'recognition_01': El modelo de reconocimiento de forma predeterminada para [LargeFaceList - crear](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc). Todas esas listas grandes cara creadas antes de marzo de 2019 están enlazadas con este modelo de reconocimiento.
      * 'recognition_02': Modelo de reconocimiento que se lanzó en marzo de 2019. se recomienda 'recognition_02' porque su precisión global se ha mejorado en comparación con 'recognition_01'.
      Lista de cuotas de cara grandes:
      * Cuota de suscripción del nivel gratuito: las listas se enfrentan a 64 grandes.
      * Cuota de suscripción del nivel s0: 1.000.000 de gran tamaño se enfrentan a las listas.
    syntax:
      content: 'function create(largeFaceListId: string, options?: Models.LargeFaceListCreateOptionalParams)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: options
          type:
            - Models.LargeFaceListCreateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.create_1'
    name: 'create(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function create(largeFaceListId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.deleteFace'
    name: 'deleteFace(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Eliminar una cara de una lista de caras grandes persistedFaceId y largeFaceListId especificado.
      <br /> Agregar o eliminar caras desde una misma lista de caras grandes se procesan secuencialmente y desde diferentes caras grandes son listas en paralelo.
    syntax:
      content: 'function deleteFace(largeFaceListId: string, persistedFaceId: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: persistedFaceId
          type:
            - string
          description: Id. que hacen referencia a un persistedFaceId determinado de una cara existente.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.deleteFace_2'
    name: 'deleteFace(string, string, RequestOptionsBase, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteFace(largeFaceListId: string, persistedFaceId: string, options: RequestOptionsBase, callback: ServiceCallback<void>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: persistedFaceId
          type:
            - string
          description: Id. que hacen referencia a un persistedFaceId determinado de una cara existente.
        - id: options
          type:
            - RequestOptionsBase
          description: Los parámetros opcionales
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.deleteFace_1'
    name: 'deleteFace(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteFace(largeFaceListId: string, persistedFaceId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: persistedFaceId
          type:
            - string
          description: Id. que hacen referencia a un persistedFaceId determinado de una cara existente.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.deleteMethod'
    name: 'deleteMethod(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Eliminar una lista de caras de gran tamaño especificado.
    syntax:
      content: 'function deleteMethod(largeFaceListId: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.deleteMethod_2'
    name: 'deleteMethod(string, RequestOptionsBase, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteMethod(largeFaceListId: string, options: RequestOptionsBase, callback: ServiceCallback<void>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: options
          type:
            - RequestOptionsBase
          description: Los parámetros opcionales
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.deleteMethod_1'
    name: 'deleteMethod(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteMethod(largeFaceListId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.get_2'
    name: 'get(string, LargeFaceListGetOptionalParams, ServiceCallback<LargeFaceList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function get(largeFaceListId: string, options: LargeFaceListGetOptionalParams, callback: ServiceCallback<LargeFaceList>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: options
          type:
            - '@azure/cognitiveservices-face.LargeFaceListGetOptionalParams'
          description: Los parámetros opcionales
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.LargeFaceList>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.LargeFaceListGetResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.get'
    name: 'get(string, Models.LargeFaceListGetOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Recuperar una lista de caras grandes largeFaceListId, nombre, userData y recognitionModel.'
    syntax:
      content: 'function get(largeFaceListId: string, options?: Models.LargeFaceListGetOptionalParams)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: options
          type:
            - Models.LargeFaceListGetOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.LargeFaceListGetResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.get_1'
    name: 'get(string, ServiceCallback<LargeFaceList>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function get(largeFaceListId: string, callback: ServiceCallback<LargeFaceList>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.LargeFaceList>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.LargeFaceListGetResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.getFace'
    name: 'getFace(string, string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Recuperar información acerca de una cara persistente (especificada por persistedFaceId y su largeFaceListId perteneciente).
    syntax:
      content: 'function getFace(largeFaceListId: string, persistedFaceId: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: persistedFaceId
          type:
            - string
          description: Id. que hacen referencia a un persistedFaceId determinado de una cara existente.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.LargeFaceListGetFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.getFace_2'
    name: 'getFace(string, string, RequestOptionsBase, ServiceCallback<PersistedFace>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getFace(largeFaceListId: string, persistedFaceId: string, options: RequestOptionsBase, callback: ServiceCallback<PersistedFace>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: persistedFaceId
          type:
            - string
          description: Id. que hacen referencia a un persistedFaceId determinado de una cara existente.
        - id: options
          type:
            - RequestOptionsBase
          description: Los parámetros opcionales
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.LargeFaceListGetFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.getFace_1'
    name: 'getFace(string, string, ServiceCallback<PersistedFace>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getFace(largeFaceListId: string, persistedFaceId: string, callback: ServiceCallback<PersistedFace>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: persistedFaceId
          type:
            - string
          description: Id. que hacen referencia a un persistedFaceId determinado de una cara existente.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.LargeFaceListGetFaceResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.getTrainingStatus'
    name: 'getTrainingStatus(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Recuperar el estado de la formación de una lista de caras de gran tamaño (completada o en curso).
    syntax:
      content: 'function getTrainingStatus(largeFaceListId: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.LargeFaceListGetTrainingStatusResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.getTrainingStatus_2'
    name: 'getTrainingStatus(string, RequestOptionsBase, ServiceCallback<TrainingStatus>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getTrainingStatus(largeFaceListId: string, options: RequestOptionsBase, callback: ServiceCallback<TrainingStatus>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: options
          type:
            - RequestOptionsBase
          description: Los parámetros opcionales
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.TrainingStatus>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.LargeFaceListGetTrainingStatusResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.getTrainingStatus_1'
    name: 'getTrainingStatus(string, ServiceCallback<TrainingStatus>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getTrainingStatus(largeFaceListId: string, callback: ServiceCallback<TrainingStatus>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-face.TrainingStatus>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.LargeFaceListGetTrainingStatusResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.constructor'
    name: LargeFaceListOperations(FaceClientContext)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Crear un LargeFaceListOperations.
    syntax:
      content: 'new LargeFaceListOperations(client: FaceClientContext)'
      parameters:
        - id: client
          type:
            - '@azure/cognitiveservices-face.FaceClientContext'
          description: |
            Referencia para el cliente del servicio.
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.list_2'
    name: 'list(LargeFaceListListOptionalParams, ServiceCallback<LargeFaceList[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function list(options: LargeFaceListListOptionalParams, callback: ServiceCallback<LargeFaceList[]>)'
      parameters:
        - id: options
          type:
            - '@azure/cognitiveservices-face.LargeFaceListListOptionalParams'
          description: Los parámetros opcionales
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.LargeFaceList[]>'
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.LargeFaceListListResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.list'
    name: list(Models.LargeFaceListListOptionalParams)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Mostrar información de las listas de caras grande de largeFaceListId, nombre, userData y recognitionModel. <br
      />
      Para obtener información de cara dentro de uso largeFaceList [cara LargeFaceList - Get](/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)<br />
      * Listas de caras grandes se almacenan en orden alfabético de largeFaceListId.
      * parámetro "start" (cadena, opcional) es un valor de largeFaceListId proporcionado por el usuario que devuelven las entradas tienen identificadores mayor mediante la comparación de cadenas. "start" establecido en vacío para indicar si la devolución desde el primer elemento.
      * parámetro "top" (int, opcional) especifica el número de entradas que se devolverá. En una llamada, se puede devolver un máximo de 1000 entradas. Para capturar más, puede especificar "start" con el Id. de la entrada devuelta último de la llamada actual.
      <br />
      Por ejemplo, total de 5 listas grandes persona: "list1",..., "list5".
      <br /> "empezar = & principales =" devolverá todas las listas de 5.
      <br /> "empezar = & top = 2" devolverá "list1", "list2".
      <br /> "empezar = list2 & superior = 3" devolverá "list3", "list4", "list5".
    syntax:
      content: 'function list(options?: Models.LargeFaceListListOptionalParams)'
      parameters:
        - id: options
          type:
            - Models.LargeFaceListListOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.LargeFaceListListResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.list_1'
    name: 'list(ServiceCallback<LargeFaceList[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function list(callback: ServiceCallback<LargeFaceList[]>)'
      parameters:
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.LargeFaceList[]>'
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.LargeFaceListListResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.listFaces_2'
    name: 'listFaces(string, LargeFaceListListFacesOptionalParams, ServiceCallback<PersistedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function listFaces(largeFaceListId: string, options: LargeFaceListListFacesOptionalParams, callback: ServiceCallback<PersistedFace[]>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: options
          type:
            - '@azure/cognitiveservices-face.LargeFaceListListFacesOptionalParams'
          description: Los parámetros opcionales
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.PersistedFace[]>'
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.LargeFaceListListFacesResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.listFaces'
    name: 'listFaces(string, Models.LargeFaceListListFacesOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Enumerar todas las caras en una lista de caras grandes y recuperar información de fuente (incluidas userData y persistedFaceIds de caras registradas de la cara).
    syntax:
      content: 'function listFaces(largeFaceListId: string, options?: Models.LargeFaceListListFacesOptionalParams)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: options
          type:
            - Models.LargeFaceListListFacesOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.LargeFaceListListFacesResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.listFaces_1'
    name: 'listFaces(string, ServiceCallback<PersistedFace[]>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function listFaces(largeFaceListId: string, callback: ServiceCallback<PersistedFace[]>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: callback
          type:
            - 'ServiceCallback<@azure/cognitiveservices-face.PersistedFace[]>'
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.LargeFaceListListFacesResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.train'
    name: 'train(string, msRest.RequestOptionsBase)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Poner en cola una tarea de aprendizaje de lista de caras grandes, puede que no se inicie inmediatamente la tarea de aprendizaje.'
    syntax:
      content: 'function train(largeFaceListId: string, options?: msRest.RequestOptionsBase)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: options
          type:
            - msRest.RequestOptionsBase
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.train_2'
    name: 'train(string, RequestOptionsBase, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function train(largeFaceListId: string, options: RequestOptionsBase, callback: ServiceCallback<void>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: options
          type:
            - RequestOptionsBase
          description: Los parámetros opcionales
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.train_1'
    name: 'train(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function train(largeFaceListId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.update_2'
    name: 'update(string, LargeFaceListUpdateOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function update(largeFaceListId: string, options: LargeFaceListUpdateOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: options
          type:
            - '@azure/cognitiveservices-face.LargeFaceListUpdateOptionalParams'
          description: Los parámetros opcionales
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.update'
    name: 'update(string, Models.LargeFaceListUpdateOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Actualizar la información de una lista de caras de gran tamaño.
    syntax:
      content: 'function update(largeFaceListId: string, options?: Models.LargeFaceListUpdateOptionalParams)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: options
          type:
            - Models.LargeFaceListUpdateOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.update_1'
    name: 'update(string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function update(largeFaceListId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.updateFace_2'
    name: 'updateFace(string, string, LargeFaceListUpdateFaceOptionalParams, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function updateFace(largeFaceListId: string, persistedFaceId: string, options: LargeFaceListUpdateFaceOptionalParams, callback: ServiceCallback<void>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: persistedFaceId
          type:
            - string
          description: Id. que hacen referencia a un persistedFaceId determinado de una cara existente.
        - id: options
          type:
            - '@azure/cognitiveservices-face.LargeFaceListUpdateFaceOptionalParams'
          description: Los parámetros opcionales
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.updateFace'
    name: 'updateFace(string, string, Models.LargeFaceListUpdateFaceOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Actualizar campo de una cara persistente userData.
    syntax:
      content: 'function updateFace(largeFaceListId: string, persistedFaceId: string, options?: Models.LargeFaceListUpdateFaceOptionalParams)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: persistedFaceId
          type:
            - string
          description: Id. que hacen referencia a un persistedFaceId determinado de una cara existente.
        - id: options
          type:
            - Models.LargeFaceListUpdateFaceOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
  - uid: '@azure/cognitiveservices-face.LargeFaceListOperations.updateFace_1'
    name: 'updateFace(string, string, ServiceCallback<void>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function updateFace(largeFaceListId: string, persistedFaceId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: largeFaceListId
          type:
            - string
          description: Id. de referencia a una lista de caras grandes determinado.
        - id: persistedFaceId
          type:
            - string
          description: Id. que hacen referencia a un persistedFaceId determinado de una cara existente.
        - id: callback
          type:
            - ServiceCallback<void>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-face'
references:
  - uid: '@azure/cognitiveservices-face.FaceClientContext'
    name: FaceClientContext
    spec.typeScript:
      - name: FaceClientContext
        fullName: FaceClientContext
        uid: '@azure/cognitiveservices-face.FaceClientContext'
  - uid: ServiceCallback<@azure/cognitiveservices-face.PersistedFace>
    name: PersistedFace>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PersistedFace
        fullName: PersistedFace
        uid: '@azure/cognitiveservices-face.PersistedFace'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cognitiveservices-face.LargeFaceListAddFaceFromStreamOptionalParams'
    name: LargeFaceListAddFaceFromStreamOptionalParams
    spec.typeScript:
      - name: LargeFaceListAddFaceFromStreamOptionalParams
        fullName: LargeFaceListAddFaceFromStreamOptionalParams
        uid: '@azure/cognitiveservices-face.LargeFaceListAddFaceFromStreamOptionalParams'
  - uid: '@azure/cognitiveservices-face.LargeFaceListAddFaceFromUrlOptionalParams'
    name: LargeFaceListAddFaceFromUrlOptionalParams
    spec.typeScript:
      - name: LargeFaceListAddFaceFromUrlOptionalParams
        fullName: LargeFaceListAddFaceFromUrlOptionalParams
        uid: '@azure/cognitiveservices-face.LargeFaceListAddFaceFromUrlOptionalParams'
  - uid: '@azure/cognitiveservices-face.LargeFaceListCreateOptionalParams'
    name: LargeFaceListCreateOptionalParams
    spec.typeScript:
      - name: LargeFaceListCreateOptionalParams
        fullName: LargeFaceListCreateOptionalParams
        uid: '@azure/cognitiveservices-face.LargeFaceListCreateOptionalParams'
  - uid: ServiceCallback<@azure/cognitiveservices-face.LargeFaceList>
    name: LargeFaceList>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: LargeFaceList
        fullName: LargeFaceList
        uid: '@azure/cognitiveservices-face.LargeFaceList'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cognitiveservices-face.LargeFaceListGetOptionalParams'
    name: LargeFaceListGetOptionalParams
    spec.typeScript:
      - name: LargeFaceListGetOptionalParams
        fullName: LargeFaceListGetOptionalParams
        uid: '@azure/cognitiveservices-face.LargeFaceListGetOptionalParams'
  - uid: ServiceCallback<@azure/cognitiveservices-face.TrainingStatus>
    name: TrainingStatus>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: TrainingStatus
        fullName: TrainingStatus
        uid: '@azure/cognitiveservices-face.TrainingStatus'
      - name: '>'
        fullName: '>'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.LargeFaceList[]>'
    name: 'LargeFaceList[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: LargeFaceList
        fullName: LargeFaceList
        uid: '@azure/cognitiveservices-face.LargeFaceList'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.LargeFaceListListOptionalParams'
    name: LargeFaceListListOptionalParams
    spec.typeScript:
      - name: LargeFaceListListOptionalParams
        fullName: LargeFaceListListOptionalParams
        uid: '@azure/cognitiveservices-face.LargeFaceListListOptionalParams'
  - uid: 'ServiceCallback<@azure/cognitiveservices-face.PersistedFace[]>'
    name: 'PersistedFace[]>'
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: PersistedFace
        fullName: PersistedFace
        uid: '@azure/cognitiveservices-face.PersistedFace'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/cognitiveservices-face.LargeFaceListListFacesOptionalParams'
    name: LargeFaceListListFacesOptionalParams
    spec.typeScript:
      - name: LargeFaceListListFacesOptionalParams
        fullName: LargeFaceListListFacesOptionalParams
        uid: '@azure/cognitiveservices-face.LargeFaceListListFacesOptionalParams'
  - uid: '@azure/cognitiveservices-face.LargeFaceListUpdateOptionalParams'
    name: LargeFaceListUpdateOptionalParams
    spec.typeScript:
      - name: LargeFaceListUpdateOptionalParams
        fullName: LargeFaceListUpdateOptionalParams
        uid: '@azure/cognitiveservices-face.LargeFaceListUpdateOptionalParams'
  - uid: '@azure/cognitiveservices-face.LargeFaceListUpdateFaceOptionalParams'
    name: LargeFaceListUpdateFaceOptionalParams
    spec.typeScript:
      - name: LargeFaceListUpdateFaceOptionalParams
        fullName: LargeFaceListUpdateFaceOptionalParams
        uid: '@azure/cognitiveservices-face.LargeFaceListUpdateFaceOptionalParams'
### YamlMime:UniversalReference
ms.openlocfilehash: 56789ebeca7ab18b9af71b968096cbb2061fddb9
ms.sourcegitcommit: 286f52ea38c9eff2ec9d4f8cabeb86f62fd9c406
ms.translationtype: MT
ms.contentlocale: es-ES
ms.lasthandoff: 08/22/2018
ms.locfileid: "41691164"
items:
- uid: '@azure/cosmos.Databases'
  name: Databases
  fullName: Databases
  children:
  - '@azure/cosmos.Databases.create'
  - '@azure/cosmos.Databases.createIfNotExists'
  - '@azure/cosmos.Databases.constructor'
  - '@azure/cosmos.Databases.query'
  - '@azure/cosmos.Databases.readAll'
  langs:
  - typeScript
  type: class
  summary: Operaciones para crear nuevas bases de datos y todas las bases de datos de lectura/consulta
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.create'
  name: create
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Envíe una solicitud para crear una base de datos.

    Una base de datos administra los usuarios, permisos y un conjunto de contenedores.

    Cada cuenta de base de datos de Azure Cosmos DB es capaz de admitir varias independientes con el nombre de las bases de datos, con la base de datos que se va a un contenedor lógico para los datos.


    Cada base de datos consta de uno o varios contenedores, cada uno de los cuales a su vez contienen uno o varios documentos. Puesto que las bases de datos son un un recurso administrativo, la clave maestra de servicio será necesaria con el fin de obtener acceso y completar correctamente todas las acciones mediante las API de usuario.
  syntax:
    content: 'function create(body: DatabaseDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.DatabaseDefinition'
      description: El <xref:DatabaseDefinition> que representa el <xref:Database> a crearse.
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        Use esta opción para establecer opciones como el tamaño de página de respuesta, los tokens de continuación, etcetera.
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.DatabaseResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.createIfNotExists'
  name: createIfNotExists
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    Compruebe si existe una base de datos, y si no, crearla.

    Esto hará que una operación de lectura en función del identificador en el `body`, a continuación, si no se encuentra, una operación de creación.

    Una base de datos administra los usuarios, permisos y un conjunto de contenedores.

    Cada cuenta de base de datos de Azure Cosmos DB es capaz de admitir varias independientes con el nombre de las bases de datos, con la base de datos que se va a un contenedor lógico para los datos.


    Cada base de datos consta de uno o varios contenedores, cada uno de los cuales a su vez contienen uno o varios documentos. Puesto que las bases de datos son un un recurso administrativo, la clave maestra de servicio será necesaria con el fin de obtener acceso y completar correctamente todas las acciones mediante las API de usuario.
  syntax:
    content: 'function createIfNotExists(body: DatabaseDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.DatabaseDefinition'
      description: El <xref:DatabaseDefinition> que representa el <xref:Database> a crearse.
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: "\n"
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.DatabaseResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.constructor'
  name: Databases
  children: []
  type: constructor
  langs:
  - typeScript
  summary: ''
  syntax:
    content: 'new Databases(client: CosmosClient, clientContext: ClientContext)'
    parameters:
    - id: client
      type:
      - '@azure/cosmos.CosmosClient'
      description: ''
    - id: clientContext
      type:
      - ClientContext
      description: ''
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.query'
  name: query
  children: []
  type: method
  langs:
  - typeScript
  summary: Consulta todas las bases de datos.
  syntax:
    content: 'function query(query: string | SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - string | @azure/cosmos.SqlQuerySpec
      description: Configuración de consulta de la operación. Consulte <xref:SqlQuerySpec> para obtener más información sobre cómo configurar una consulta.
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: Use esta opción para establecer opciones como el tamaño de página de respuesta, los tokens de continuación, etcetera.
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.DatabaseDefinition>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Databases.readAll'
  name: readAll
  children: []
  type: method
  langs:
  - typeScript
  summary: Lee todas las bases de datos.
  syntax:
    content: 'function readAll(options?: FeedOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: Use esta opción para establecer opciones como el tamaño de página de respuesta, los tokens de continuación, etcetera.
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.DatabaseDefinition>'
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.CosmosClient'
  spec.typeScript:
  - name: CosmosClient
    fullName: CosmosClient
    uid: '@azure/cosmos.CosmosClient'
- uid: '@azure/cosmos.DatabaseDefinition'
  spec.typeScript:
  - name: DatabaseDefinition
    fullName: DatabaseDefinition
    uid: '@azure/cosmos.DatabaseDefinition'
- uid: '@azure/cosmos.RequestOptions'
  spec.typeScript:
  - name: RequestOptions
    fullName: RequestOptions
    uid: '@azure/cosmos.RequestOptions'
- uid: Promise<@azure/cosmos.DatabaseResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: DatabaseResponse
    fullName: DatabaseResponse
    uid: '@azure/cosmos.DatabaseResponse'
  - name: '>'
    fullName: '>'
- uid: string | @azure/cosmos.SqlQuerySpec
  spec.typeScript:
  - name: 'string | '
    fullName: 'string | '
  - name: SqlQuerySpec
    fullName: SqlQuerySpec
    uid: '@azure/cosmos.SqlQuerySpec'
- uid: '@azure/cosmos.FeedOptions'
  spec.typeScript:
  - name: FeedOptions
    fullName: FeedOptions
    uid: '@azure/cosmos.FeedOptions'
- uid: '@azure/cosmos.QueryIterator<@azure/cosmos.DatabaseDefinition>'
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <
    fullName: <
  - name: DatabaseDefinition
    fullName: DatabaseDefinition
    uid: '@azure/cosmos.DatabaseDefinition'
  - name: '>'
    fullName: '>'

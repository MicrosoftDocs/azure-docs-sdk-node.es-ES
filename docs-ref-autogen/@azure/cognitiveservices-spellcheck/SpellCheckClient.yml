### YamlMime:UniversalReference
items:
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient'
    name: SpellCheckClient
    fullName: SpellCheckClient
    children:
      - '@azure/cognitiveservices-spellcheck.SpellCheckClient.credentials'
      - '@azure/cognitiveservices-spellcheck.SpellCheckClient.endpoint'
      - '@azure/cognitiveservices-spellcheck.SpellCheckClient.sendOperationRequest'
      - '@azure/cognitiveservices-spellcheck.SpellCheckClient.sendRequest'
      - '@azure/cognitiveservices-spellcheck.SpellCheckClient.constructor'
      - '@azure/cognitiveservices-spellcheck.SpellCheckClient.spellChecker'
      - '@azure/cognitiveservices-spellcheck.SpellCheckClient.spellChecker_1'
      - '@azure/cognitiveservices-spellcheck.SpellCheckClient.spellChecker_2'
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: '@azure/cognitiveservices-spellcheck.SpellCheckClientContext'
    package: '@azure/cognitiveservices-spellcheck'
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.credentials'
    name: credentials
    fullName: credentials
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'credentials: ServiceClientCredentials'
      return:
        type:
          - ServiceClientCredentials
    package: '@azure/cognitiveservices-spellcheck'
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.endpoint'
    name: endpoint
    fullName: endpoint
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'endpoint?: undefined | string'
      return:
        type:
          - undefined | string
    package: '@azure/cognitiveservices-spellcheck'
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.sendOperationRequest'
    name: 'sendOperationRequest(OperationArguments, OperationSpec, ServiceCallback<any>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Enviar una solicitud HTTP que se rellena con el OperationSpec proporcionado.
    syntax:
      content: 'function sendOperationRequest(operationArguments: OperationArguments, operationSpec: OperationSpec, callback?: ServiceCallback<any>)'
      parameters:
        - id: operationArguments
          type:
            - OperationArguments
          description: Los argumentos que se rellenarán los valores de la solicitud HTTP con plantillas de.
        - id: operationSpec
          type:
            - OperationSpec
          description: OperationSpec debe usar para rellenar la solicitud HTTP.
        - id: callback
          type:
            - ServiceCallback<any>
          description: |
            La devolución de llamada cuando se recibe la respuesta.
          optional: true
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/cognitiveservices-spellcheck'
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.sendRequest'
    name: sendRequest(RequestPrepareOptions | WebResource)
    children: []
    type: method
    langs:
      - typeScript
    summary: Enviar la solicitud HTTP proporcionada.
    syntax:
      content: 'function sendRequest(options: RequestPrepareOptions | WebResource)'
      parameters:
        - id: options
          type:
            - RequestPrepareOptions | WebResource
          description: ''
      return:
        type:
          - Promise<HttpOperationResponse>
    package: '@azure/cognitiveservices-spellcheck'
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.constructor'
    name: 'SpellCheckClient(ServiceClientCredentials, Models.SpellCheckClientOptions)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Inicializa una nueva instancia de la clase SpellCheckClient.
    syntax:
      content: 'new SpellCheckClient(credentials: ServiceClientCredentials, options?: Models.SpellCheckClientOptions)'
      parameters:
        - id: credentials
          type:
            - ServiceClientCredentials
          description: Credenciales de suscripción que identifican la suscripción de cliente.
        - id: options
          type:
            - Models.SpellCheckClientOptions
          description: ''
          optional: true
    package: '@azure/cognitiveservices-spellcheck'
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.spellChecker'
    name: 'spellChecker(string, Models.SpellCheckClientSpellCheckerOptionalParams)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function spellChecker(text: string, options?: Models.SpellCheckClientSpellCheckerOptionalParams)'
      parameters:
        - id: text
          type:
            - string
          description: |-
            La cadena de texto para comprobar los errores de ortografía y gramática. La longitud combinada de la cadena de texto y cadena preContextText postContextText cadena no puede tener más de 10.000 caracteres.
            Puede especificar este parámetro en la cadena de consulta de una solicitud GET o en el cuerpo de una solicitud POST. Debido a la longitud máxima de la cadena de consulta, normalmente deberá usar una solicitud POST a menos que se está comprobando solo cadenas cortas.
        - id: options
          type:
            - Models.SpellCheckClientSpellCheckerOptionalParams
          description: ''
          optional: true
      return:
        type:
          - Promise<Models.SpellCheckerResponse>
    package: '@azure/cognitiveservices-spellcheck'
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.spellChecker_1'
    name: 'spellChecker(string, ServiceCallback<SpellCheck>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function spellChecker(text: string, callback: ServiceCallback<SpellCheck>)'
      parameters:
        - id: text
          type:
            - string
          description: |-
            La cadena de texto para comprobar los errores de ortografía y gramática. La longitud combinada de la cadena de texto y cadena preContextText postContextText cadena no puede tener más de 10.000 caracteres.
            Puede especificar este parámetro en la cadena de consulta de una solicitud GET o en el cuerpo de una solicitud POST. Debido a la longitud máxima de la cadena de consulta, normalmente deberá usar una solicitud POST a menos que se está comprobando solo cadenas cortas.
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-spellcheck.SpellCheck>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.SpellCheckerResponse>
    package: '@azure/cognitiveservices-spellcheck'
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.spellChecker_2'
    name: 'spellChecker(string, SpellCheckClientSpellCheckerOptionalParams, ServiceCallback<SpellCheck>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function spellChecker(text: string, options: SpellCheckClientSpellCheckerOptionalParams, callback: ServiceCallback<SpellCheck>)'
      parameters:
        - id: text
          type:
            - string
          description: |-
            La cadena de texto para comprobar los errores de ortografía y gramática. La longitud combinada de la cadena de texto y cadena preContextText postContextText cadena no puede tener más de 10.000 caracteres.
            Puede especificar este parámetro en la cadena de consulta de una solicitud GET o en el cuerpo de una solicitud POST. Debido a la longitud máxima de la cadena de consulta, normalmente deberá usar una solicitud POST a menos que se está comprobando solo cadenas cortas.
        - id: options
          type:
            - '@azure/cognitiveservices-spellcheck.SpellCheckClientSpellCheckerOptionalParams'
          description: Los parámetros opcionales
        - id: callback
          type:
            - ServiceCallback<@azure/cognitiveservices-spellcheck.SpellCheck>
          description: |
            La devolución de llamada
      return:
        type:
          - Promise<Models.SpellCheckerResponse>
    package: '@azure/cognitiveservices-spellcheck'
references:
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClientContext'
    name: SpellCheckClientContext
    spec.typeScript:
      - name: SpellCheckClientContext
        fullName: SpellCheckClientContext
        uid: '@azure/cognitiveservices-spellcheck.SpellCheckClientContext'
  - uid: ServiceCallback<@azure/cognitiveservices-spellcheck.SpellCheck>
    name: SpellCheck>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SpellCheck
        fullName: SpellCheck
        uid: '@azure/cognitiveservices-spellcheck.SpellCheck'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cognitiveservices-spellcheck.SpellCheckClientSpellCheckerOptionalParams'
    name: SpellCheckClientSpellCheckerOptionalParams
    spec.typeScript:
      - name: SpellCheckClientSpellCheckerOptionalParams
        fullName: SpellCheckClientSpellCheckerOptionalParams
        uid: '@azure/cognitiveservices-spellcheck.SpellCheckClientSpellCheckerOptionalParams'
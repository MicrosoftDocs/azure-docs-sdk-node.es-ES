### YamlMime:UniversalReference
items:
  - uid: azure-iot-device.Client
    name: Client
    fullName: Client
    children:
      - azure-iot-device.Client.abandon_1
      - azure-iot-device.Client.abandon
      - azure-iot-device.Client.constructor
      - azure-iot-device.Client.close_1
      - azure-iot-device.Client.close
      - azure-iot-device.Client.complete_1
      - azure-iot-device.Client.complete
      - azure-iot-device.Client.fromAuthenticationProvider
      - azure-iot-device.Client.fromConnectionString
      - azure-iot-device.Client.fromSharedAccessSignature
      - azure-iot-device.Client.getTwin_1
      - azure-iot-device.Client.getTwin
      - azure-iot-device.Client.onDeviceMethod
      - azure-iot-device.Client.open_1
      - azure-iot-device.Client.open
      - azure-iot-device.Client.reject_1
      - azure-iot-device.Client.reject
      - azure-iot-device.Client.sendEvent_1
      - azure-iot-device.Client.sendEvent
      - azure-iot-device.Client.sendEventBatch_1
      - azure-iot-device.Client.sendEventBatch
      - azure-iot-device.Client.setOptions_1
      - azure-iot-device.Client.setOptions
      - azure-iot-device.Client.setRetryPolicy
      - azure-iot-device.Client.setTransportOptions_1
      - azure-iot-device.Client.setTransportOptions
      - azure-iot-device.Client.updateSharedAccessSignature
      - azure-iot-device.Client.uploadToBlob_1
      - azure-iot-device.Client.uploadToBlob
    langs:
      - typeScript
    type: class
    summary: |
      <span data-ttu-id="8daea-101">Cliente de dispositivo de IoT Hub usada para conectar un dispositivo con Azure IoT hub.</span><span class="sxs-lookup"><span data-stu-id="8daea-101">IoT Hub device client used to connect a device with an Azure IoT hub.</span></span>
      <span data-ttu-id="8daea-102">Los usuarios del SDK deben llamar a uno de los métodos de fábrica, [fromConnectionString](xref:azure-iot-device.Client.fromConnectionString) o [fromSharedAccessSignature](xref:azure-iot-device.Client.fromSharedAccessSignature) para crear un cliente de dispositivo de IoT Hub.</span><span class="sxs-lookup"><span data-stu-id="8daea-102">Users of the SDK should call one of the factory methods, [fromConnectionString](xref:azure-iot-device.Client.fromConnectionString) or [fromSharedAccessSignature](xref:azure-iot-device.Client.fromSharedAccessSignature) to create an IoT Hub device client.</span></span>
    extends:
      name: InternalClient
    package: azure-iot-device
  - uid: azure-iot-device.Client.abandon_1
    name: abandon(Message)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function abandon(message: Message)'
      parameters:
        - id: message
          type:
            - Message
          description: ''
      return:
        type:
          - Promise<MessageAbandoned>
    package: azure-iot-device
  - uid: azure-iot-device.Client.abandon
    name: 'abandon(Message, Callback<MessageAbandoned>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function abandon(message: Message, abandonCallback: Callback<MessageAbandoned>)'
      parameters:
        - id: message
          type:
            - Message
          description: ''
        - id: abandonCallback
          type:
            - Callback<MessageAbandoned>
          description: ''
    package: azure-iot-device
  - uid: azure-iot-device.Client.constructor
    name: 'Client(DeviceTransport, string, BlobUploadClient)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new Client(transport: DeviceTransport, connStr?: string, blobUploadClient?: BlobUploadClient)'
      parameters:
        - id: transport
          type:
            - azure-iot-device.DeviceTransport
          description: '<span data-ttu-id="8daea-103">Un objeto que implementa la interfaz esperada de un objeto de transporte, por ejemplo, [Http](xref:azure-iot-device-http.Http).</span><span class="sxs-lookup"><span data-stu-id="8daea-103">An object that implements the interface expected of a transport object, e.g., [Http](xref:azure-iot-device-http.Http).</span></span>'
        - id: connStr
          type:
            - string
          description: '<span data-ttu-id="8daea-104">Una cadena de conexión (opcional: cuando no se proporciona, se debe llamar a updateSharedAccessSignature para establecer el token SharedAccessSignature directamente).</span><span class="sxs-lookup"><span data-stu-id="8daea-104">A connection string (optional: when not provided, updateSharedAccessSignature must be called to set the SharedAccessSignature token directly).</span></span>'
          optional: true
        - id: blobUploadClient
          type:
            - BlobUploadClient
          description: |
            <span data-ttu-id="8daea-105">Objeto que es capaz de cargar una secuencia en un blob.</span><span class="sxs-lookup"><span data-stu-id="8daea-105">An object that is capable of uploading a stream to a blob.</span></span>
          optional: true
    package: azure-iot-device
  - uid: azure-iot-device.Client.close_1
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      <span data-ttu-id="8daea-106">Cierra la conexión de transporte y destruye los recursos del cliente.</span><span class="sxs-lookup"><span data-stu-id="8daea-106">Closes the transport connection and destroys the client resources.</span></span>
      <span data-ttu-id="8daea-107">*Nota: Después de llamar a este método en el cliente no se puede reutilizar el objeto.*</span><span class="sxs-lookup"><span data-stu-id="8daea-107">*Note: After calling this method the Client object cannot be reused.*</span></span>
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<Disconnected>
    package: azure-iot-device
  - uid: azure-iot-device.Client.close
    name: close(Callback<Disconnected>)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      <span data-ttu-id="8daea-108">Cierra la conexión de transporte y destruye los recursos del cliente.</span><span class="sxs-lookup"><span data-stu-id="8daea-108">Closes the transport connection and destroys the client resources.</span></span>
      <span data-ttu-id="8daea-109">*Nota: Después de llamar a este método en el cliente no se puede reutilizar el objeto.*</span><span class="sxs-lookup"><span data-stu-id="8daea-109">*Note: After calling this method the Client object cannot be reused.*</span></span>
    syntax:
      content: 'function close(closeCallback: Callback<Disconnected>)'
      parameters:
        - id: closeCallback
          type:
            - Callback<Disconnected>
          description: ''
    package: azure-iot-device
  - uid: azure-iot-device.Client.complete_1
    name: complete(Message)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function complete(message: Message)'
      parameters:
        - id: message
          type:
            - Message
          description: ''
      return:
        type:
          - Promise<MessageCompleted>
    package: azure-iot-device
  - uid: azure-iot-device.Client.complete
    name: 'complete(Message, Callback<MessageCompleted>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function complete(message: Message, completeCallback: Callback<MessageCompleted>)'
      parameters:
        - id: message
          type:
            - Message
          description: ''
        - id: completeCallback
          type:
            - Callback<MessageCompleted>
          description: ''
    package: azure-iot-device
  - uid: azure-iot-device.Client.fromAuthenticationProvider
    name: 'fromAuthenticationProvider(AuthenticationProvider, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="8daea-110">Crea a un cliente de dispositivo de IoT Hub desde el método de autenticación especificado y usa el tipo de transporte determinado.</span><span class="sxs-lookup"><span data-stu-id="8daea-110">Creates an IoT Hub device client from the given authentication method and using the given transport type.</span></span>
    syntax:
      content: 'static function fromAuthenticationProvider(authenticationProvider: AuthenticationProvider, transportCtor: any)'
      parameters:
        - id: authenticationProvider
          type:
            - AuthenticationProvider
          description: <span data-ttu-id="8daea-111">Objeto utilizado para obtener los parámetros de autenticación para el centro de IoT.</span><span class="sxs-lookup"><span data-stu-id="8daea-111">Object used to obtain the authentication parameters for the IoT hub.</span></span>
        - id: transportCtor
          type:
            - any
          description: |
            <span data-ttu-id="8daea-112">Transporte de protocolo que se usa para conectarse a IoT hub.</span><span class="sxs-lookup"><span data-stu-id="8daea-112">Transport protocol used to connect to IoT hub.</span></span>
      return:
        type:
          - azure-iot-device.Client
    package: azure-iot-device
  - uid: azure-iot-device.Client.fromConnectionString
    name: 'fromConnectionString(string, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="8daea-113">Crea a un cliente de dispositivo de IoT Hub de la cadena de conexión determinado mediante el tipo de transporte determinado.</span><span class="sxs-lookup"><span data-stu-id="8daea-113">Creates an IoT Hub device client from the given connection string using the given transport type.</span></span>
    syntax:
      content: 'static function fromConnectionString(connStr: string, transportCtor: any)'
      parameters:
        - id: connStr
          type:
            - string
          description: <span data-ttu-id="8daea-114">Una cadena de conexión que encapsula permisos de "conexión de dispositivo" en un centro de IoT.</span><span class="sxs-lookup"><span data-stu-id="8daea-114">A connection string which encapsulates "device connect" permissions on an IoT hub.</span></span>
        - id: transportCtor
          type:
            - any
          description: |
            <span data-ttu-id="8daea-115">Un constructor de transporte.</span><span class="sxs-lookup"><span data-stu-id="8daea-115">A transport constructor.</span></span>
      return:
        type:
          - azure-iot-device.Client
    package: azure-iot-device
  - uid: azure-iot-device.Client.fromSharedAccessSignature
    name: 'fromSharedAccessSignature(string, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="8daea-116">Crea a un cliente de dispositivo de IoT Hub de la firma de acceso compartido dada con el tipo de transporte determinado.</span><span class="sxs-lookup"><span data-stu-id="8daea-116">Creates an IoT Hub device client from the given shared access signature using the given transport type.</span></span>
    syntax:
      content: 'static function fromSharedAccessSignature(sharedAccessSignature: string, transportCtor: any)'
      parameters:
        - id: sharedAccessSignature
          type:
            - string
          description: <span data-ttu-id="8daea-117">Una firma de acceso compartido que encapsula permisos de "conexión de dispositivo" en un centro de IoT.</span><span class="sxs-lookup"><span data-stu-id="8daea-117">A shared access signature which encapsulates "device connect" permissions on an IoT hub.</span></span>
        - id: transportCtor
          type:
            - any
          description: ''
      return:
        type:
          - azure-iot-device.Client
    package: azure-iot-device
  - uid: azure-iot-device.Client.getTwin_1
    name: getTwin()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getTwin()
      parameters: []
      return:
        type:
          - Promise<azure-iot-device.Twin>
    package: azure-iot-device
  - uid: azure-iot-device.Client.getTwin
    name: getTwin(Callback<Twin>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getTwin(done: Callback<Twin>)'
      parameters:
        - id: done
          type:
            - Callback<azure-iot-device.Twin>
          description: ''
    package: azure-iot-device
  - uid: azure-iot-device.Client.onDeviceMethod
    name: 'onDeviceMethod(string, (request: DeviceMethodRequest, response: DeviceMethodResponse) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="8daea-118">Registra una devolución de llamada para un método denominado `methodName`.</span><span class="sxs-lookup"><span data-stu-id="8daea-118">Registers a callback for a method named `methodName`.</span></span>
    syntax:
      content: 'function onDeviceMethod(methodName: string, callback: (request: DeviceMethodRequest, response: DeviceMethodResponse) => void)'
      parameters:
        - id: methodName
          type:
            - string
          description: <span data-ttu-id="8daea-119">Nombre del método que controlará la devolución de llamada</span><span class="sxs-lookup"><span data-stu-id="8daea-119">Name of the method that will be handled by the callback</span></span>
        - id: callback
          type:
            - '(request: DeviceMethodRequest, response: DeviceMethodResponse) => void'
          description: |
            <span data-ttu-id="8daea-120">Función que se llamará siempre que una solicitud del método para el método llamado `methodName` se recibe.</span><span class="sxs-lookup"><span data-stu-id="8daea-120">Function that shall be called whenever a method request for the method called `methodName` is received.</span></span>
    package: azure-iot-device
  - uid: azure-iot-device.Client.open_1
    name: open()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function open()
      parameters: []
      return:
        type:
          - Promise<Connected>
    package: azure-iot-device
  - uid: azure-iot-device.Client.open
    name: open(Callback<Connected>)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function open(openCallback: Callback<Connected>)'
      parameters:
        - id: openCallback
          type:
            - Callback<Connected>
          description: ''
    package: azure-iot-device
  - uid: azure-iot-device.Client.reject_1
    name: reject(Message)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function reject(message: Message)'
      parameters:
        - id: message
          type:
            - Message
          description: ''
      return:
        type:
          - Promise<MessageRejected>
    package: azure-iot-device
  - uid: azure-iot-device.Client.reject
    name: 'reject(Message, Callback<MessageRejected>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function reject(message: Message, rejectCallback: Callback<MessageRejected>)'
      parameters:
        - id: message
          type:
            - Message
          description: ''
        - id: rejectCallback
          type:
            - Callback<MessageRejected>
          description: ''
    package: azure-iot-device
  - uid: azure-iot-device.Client.sendEvent_1
    name: sendEvent(Message)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function sendEvent(message: Message)'
      parameters:
        - id: message
          type:
            - Message
          description: ''
      return:
        type:
          - Promise<MessageEnqueued>
    package: azure-iot-device
  - uid: azure-iot-device.Client.sendEvent
    name: 'sendEvent(Message, Callback<MessageEnqueued>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function sendEvent(message: Message, sendEventCallback: Callback<MessageEnqueued>)'
      parameters:
        - id: message
          type:
            - Message
          description: ''
        - id: sendEventCallback
          type:
            - Callback<MessageEnqueued>
          description: ''
    package: azure-iot-device
  - uid: azure-iot-device.Client.sendEventBatch_1
    name: 'sendEventBatch(Message[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function sendEventBatch(messages: Message[])'
      parameters:
        - id: messages
          type:
            - 'Message[]'
          description: ''
      return:
        type:
          - Promise<MessageEnqueued>
    package: azure-iot-device
  - uid: azure-iot-device.Client.sendEventBatch
    name: 'sendEventBatch(Message[], Callback<MessageEnqueued>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function sendEventBatch(messages: Message[], sendEventBatchCallback: Callback<MessageEnqueued>)'
      parameters:
        - id: messages
          type:
            - 'Message[]'
          description: ''
        - id: sendEventBatchCallback
          type:
            - Callback<MessageEnqueued>
          description: ''
    package: azure-iot-device
  - uid: azure-iot-device.Client.setOptions_1
    name: setOptions(DeviceClientOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="8daea-121">Pasa las opciones para el `Client` objeto que se puede usar para configurar el transporte.</span><span class="sxs-lookup"><span data-stu-id="8daea-121">Passes options to the `Client` object that can be used to configure the transport.</span></span>
    syntax:
      content: 'function setOptions(options: DeviceClientOptions)'
      parameters:
        - id: options
          type:
            - azure-iot-device.DeviceClientOptions
          description: ''
      return:
        type:
          - Promise<TransportConfigured>
    package: azure-iot-device
  - uid: azure-iot-device.Client.setOptions
    name: 'setOptions(DeviceClientOptions, Callback<TransportConfigured>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="8daea-122">Pasa las opciones para el `Client` objeto que se puede usar para configurar el transporte.</span><span class="sxs-lookup"><span data-stu-id="8daea-122">Passes options to the `Client` object that can be used to configure the transport.</span></span>
    syntax:
      content: 'function setOptions(options: DeviceClientOptions, done: Callback<TransportConfigured>)'
      parameters:
        - id: options
          type:
            - azure-iot-device.DeviceClientOptions
          description: '<span data-ttu-id="8daea-123">Un objeto <xref:DeviceClientOptions>.</span><span class="sxs-lookup"><span data-stu-id="8daea-123">A <xref:DeviceClientOptions> object.</span></span>'
        - id: done
          type:
            - Callback<TransportConfigured>
          description: ''
    package: azure-iot-device
  - uid: azure-iot-device.Client.setRetryPolicy
    name: setRetryPolicy(RetryPolicy)
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="8daea-124">Establece la directiva de reintento utilizada por el cliente en todas las operaciones.</span><span class="sxs-lookup"><span data-stu-id="8daea-124">Sets the retry policy used by the client on all operations.</span></span> <span data-ttu-id="8daea-125">El valor predeterminado es [ExponentialBackoffWithJitter](xref:azure-iot-common.ExponentialBackoffWithJitter).</span><span class="sxs-lookup"><span data-stu-id="8daea-125">The default is [ExponentialBackoffWithJitter](xref:azure-iot-common.ExponentialBackoffWithJitter).</span></span>'
    syntax:
      content: 'function setRetryPolicy(policy: RetryPolicy)'
      parameters:
        - id: policy
          type:
            - RetryPolicy
          description: |
            <span data-ttu-id="8daea-126">La directiva de reintentos que se debe usar para todas las operaciones futuras.</span><span class="sxs-lookup"><span data-stu-id="8daea-126">The retry policy that should be used for all future operations.</span></span>
    package: azure-iot-device
  - uid: azure-iot-device.Client.setTransportOptions_1
    name: setTransportOptions(any)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setTransportOptions(options: any)'
      parameters:
        - id: options
          type:
            - any
          description: ''
      return:
        type:
          - Promise<TransportConfigured>
    package: azure-iot-device
  - uid: azure-iot-device.Client.setTransportOptions
    name: 'setTransportOptions(any, Callback<TransportConfigured>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setTransportOptions(options: any, done: Callback<TransportConfigured>)'
      parameters:
        - id: options
          type:
            - any
          description: ''
        - id: done
          type:
            - Callback<TransportConfigured>
          description: ''
    package: azure-iot-device
  - uid: azure-iot-device.Client.updateSharedAccessSignature
    name: 'updateSharedAccessSignature(string, Callback<SharedAccessSignatureUpdated>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function updateSharedAccessSignature(sharedAccessSignature: string, updateSasCallback?: Callback<SharedAccessSignatureUpdated>)'
      parameters:
        - id: sharedAccessSignature
          type:
            - string
          description: ''
        - id: updateSasCallback
          type:
            - Callback<SharedAccessSignatureUpdated>
          description: ''
          optional: true
    package: azure-iot-device
  - uid: azure-iot-device.Client.uploadToBlob_1
    name: 'uploadToBlob(string, Stream, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="8daea-127">El `uploadToBlob` método carga un flujo en un blob.</span><span class="sxs-lookup"><span data-stu-id="8daea-127">The `uploadToBlob` method uploads a stream to a blob.</span></span>
    syntax:
      content: 'function uploadToBlob(blobName: string, stream: Stream, streamLength: number)'
      parameters:
        - id: blobName
          type:
            - string
          description: ''
        - id: stream
          type:
            - Stream
          description: ''
        - id: streamLength
          type:
            - number
          description: ''
      return:
        type:
          - Promise<void>
    package: azure-iot-device
  - uid: azure-iot-device.Client.uploadToBlob
    name: 'uploadToBlob(string, Stream, number, ErrorCallback)'
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="8daea-128">El `uploadToBlob` método carga un flujo en un blob.</span><span class="sxs-lookup"><span data-stu-id="8daea-128">The `uploadToBlob` method uploads a stream to a blob.</span></span>
    syntax:
      content: 'function uploadToBlob(blobName: string, stream: Stream, streamLength: number, callback: ErrorCallback)'
      parameters:
        - id: blobName
          type:
            - string
          description: <span data-ttu-id="8daea-129">El nombre que se usará para el blob que se creará con el contenido de la secuencia.</span><span class="sxs-lookup"><span data-stu-id="8daea-129">The name to use for the blob that will be created with the content of the stream.</span></span>
        - id: stream
          type:
            - Stream
          description: <span data-ttu-id="8daea-130">Los datos a la se deben cargar en el blob.</span><span class="sxs-lookup"><span data-stu-id="8daea-130">The data to that should be uploaded to the blob.</span></span>
        - id: streamLength
          type:
            - number
          description: <span data-ttu-id="8daea-131">El tamaño de los datos a la se debe cargar en el blob.</span><span class="sxs-lookup"><span data-stu-id="8daea-131">The size of the data to that should be uploaded to the blob.</span></span>
        - id: callback
          type:
            - ErrorCallback
          description: ''
    package: azure-iot-device
references:
  - uid: azure-iot-device.DeviceTransport
    name: DeviceTransport
    spec.typeScript:
      - name: DeviceTransport
        fullName: DeviceTransport
        uid: azure-iot-device.DeviceTransport
  - uid: Callback<azure-iot-device.Twin>
    name: Twin>
    spec.typeScript:
      - name: Callback<
        fullName: Callback<
      - name: Twin
        fullName: Twin
        uid: azure-iot-device.Twin
      - name: '>'
        fullName: '>'
  - uid: Promise<azure-iot-device.Twin>
    name: Twin>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: Twin
        fullName: Twin
        uid: azure-iot-device.Twin
      - name: '>'
        fullName: '>'
  - uid: azure-iot-device.DeviceClientOptions
    name: DeviceClientOptions
    spec.typeScript:
      - name: DeviceClientOptions
        fullName: DeviceClientOptions
        uid: azure-iot-device.DeviceClientOptions
  - uid: azure-iot-device.Client
    name: Client
    spec.typeScript:
      - name: Client
        fullName: Client
        uid: azure-iot-device.Client
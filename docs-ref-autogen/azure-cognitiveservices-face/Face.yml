### YamlMime:UniversalReference
ms.openlocfilehash: 470cfbc0b4033164719779f553927946a2544cde
ms.sourcegitcommit: 286f52ea38c9eff2ec9d4f8cabeb86f62fd9c406
ms.translationtype: MT
ms.contentlocale: es-ES
ms.lasthandoff: 08/22/2018
ms.locfileid: "41692614"
items:
- uid: azure-cognitiveservices-face.Face
  name: Face
  fullName: Face
  children:
  - azure-cognitiveservices-face.Face.detect
  - azure-cognitiveservices-face.Face.detect_1
  - azure-cognitiveservices-face.Face.detect_2
  - azure-cognitiveservices-face.Face.detectInStream_1
  - azure-cognitiveservices-face.Face.detectInStream_2
  - azure-cognitiveservices-face.Face.detectInStream
  - azure-cognitiveservices-face.Face.detectInStreamWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.detectWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.findSimilar
  - azure-cognitiveservices-face.Face.findSimilar_1
  - azure-cognitiveservices-face.Face.findSimilar_2
  - azure-cognitiveservices-face.Face.findSimilarWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.group
  - azure-cognitiveservices-face.Face.group_1
  - azure-cognitiveservices-face.Face.group_2
  - azure-cognitiveservices-face.Face.groupWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.identify_1
  - azure-cognitiveservices-face.Face.identify_2
  - azure-cognitiveservices-face.Face.identify
  - azure-cognitiveservices-face.Face.identifyWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.verify
  - azure-cognitiveservices-face.Face.verify_1
  - azure-cognitiveservices-face.Face.verify_2
  - azure-cognitiveservices-face.Face.verifyWithHttpOperationResponse
  - azure-cognitiveservices-face.Face.verifyWithPersonGroup
  - azure-cognitiveservices-face.Face.verifyWithPersonGroup_1
  - azure-cognitiveservices-face.Face.verifyWithPersonGroup_2
  - azure-cognitiveservices-face.Face.verifyWithPersonGroupWithHttpOperationResponse
  langs:
  - typeScript
  type: interface
  summary: ''
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detect
  name: detect
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-101">Detecte caras humanas en una imagen y devuelve las ubicaciones de cara y opcionalmente con faceIds, puntos de referencia y atributos.</span><span class="sxs-lookup"><span data-stu-id="01bfe-101">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detect(url: string, options?: Object)'
    parameters:
    - id: url
      type:
      - string
      description: "\n"
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detect_1
  name: detect
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-102">Detecte caras humanas en una imagen y devuelve las ubicaciones de cara y opcionalmente con faceIds, puntos de referencia y atributos.</span><span class="sxs-lookup"><span data-stu-id="01bfe-102">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detect(url: string, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: url
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detect_2
  name: detect
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-103">Detecte caras humanas en una imagen y devuelve las ubicaciones de cara y opcionalmente con faceIds, puntos de referencia y atributos.</span><span class="sxs-lookup"><span data-stu-id="01bfe-103">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detect(url: string, options: Object, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: url
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectInStream_1
  name: detectInStream
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-104">Detecte caras humanas en una imagen y devuelve las ubicaciones de cara y opcionalmente con faceIds, puntos de referencia y atributos.</span><span class="sxs-lookup"><span data-stu-id="01bfe-104">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectInStream(image: stream.Readable, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectInStream_2
  name: detectInStream
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-105">Detecte caras humanas en una imagen y devuelve las ubicaciones de cara y opcionalmente con faceIds, puntos de referencia y atributos.</span><span class="sxs-lookup"><span data-stu-id="01bfe-105">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectInStream(image: stream.Readable, options: Object, callback: ServiceCallback<DetectedFace[]>)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectInStream
  name: detectInStream
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-106">Detecte caras humanas en una imagen y devuelve las ubicaciones de cara y opcionalmente con faceIds, puntos de referencia y atributos.</span><span class="sxs-lookup"><span data-stu-id="01bfe-106">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectInStream(image: stream.Readable, options?: Object)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="01bfe-107">Una secuencia de imagen.</span><span class="sxs-lookup"><span data-stu-id="01bfe-107">An image stream.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.DetectedFace[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectInStreamWithHttpOperationResponse
  name: detectInStreamWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-108">Detecte caras humanas en una imagen y devuelve las ubicaciones de cara y opcionalmente con faceIds, puntos de referencia y atributos.</span><span class="sxs-lookup"><span data-stu-id="01bfe-108">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectInStreamWithHttpOperationResponse(image: stream.Readable, options?: Object)'
    parameters:
    - id: image
      type:
      - stream.Readable
      description: >
        <span data-ttu-id="01bfe-109">Una secuencia de imagen.</span><span class="sxs-lookup"><span data-stu-id="01bfe-109">An image stream.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.DetectedFace[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.detectWithHttpOperationResponse
  name: detectWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-110">Detecte caras humanas en una imagen y devuelve las ubicaciones de cara y opcionalmente con faceIds, puntos de referencia y atributos.</span><span class="sxs-lookup"><span data-stu-id="01bfe-110">Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes.</span></span>
  syntax:
    content: 'function detectWithHttpOperationResponse(url: string, options?: Object)'
    parameters:
    - id: url
      type:
      - string
      description: "\n"
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.DetectedFace[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilar
  name: findSimilar
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-111">A partir de faceId de cara consultada, encuentra las caras parecidas desde una matriz de faceId o un faceListId.</span><span class="sxs-lookup"><span data-stu-id="01bfe-111">Given query face's faceId, find the similar-looking faces from a faceId array or a faceListId.</span></span>
  syntax:
    content: 'function findSimilar(faceId: string, options?: Object)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="01bfe-112">FaceId de la cara de la consulta.</span><span class="sxs-lookup"><span data-stu-id="01bfe-112">FaceId of the query face.</span></span> <span data-ttu-id="01bfe-113">Usuario debe llamar a Face: detectar primero para obtener un faceId válido.</span><span class="sxs-lookup"><span data-stu-id="01bfe-113">User needs to call Face - Detect first to get a valid faceId.</span></span> <span data-ttu-id="01bfe-114">Tenga en cuenta que este faceId no se conserva y expirará en 24 horas después de la llamada de detección</span><span class="sxs-lookup"><span data-stu-id="01bfe-114">Note that this faceId is not persisted and will expire 24 hours after the detection call</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.SimilarFaceResult[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilar_1
  name: findSimilar
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-115">A partir de faceId de cara consultada, encuentra las caras parecidas desde una matriz de faceId o un faceListId.</span><span class="sxs-lookup"><span data-stu-id="01bfe-115">Given query face's faceId, find the similar-looking faces from a faceId array or a faceListId.</span></span>
  syntax:
    content: 'function findSimilar(faceId: string, callback: ServiceCallback<SimilarFaceResult[]>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.SimilarFaceResult[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.SimilarFaceResult[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilar_2
  name: findSimilar
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-116">A partir de faceId de cara consultada, encuentra las caras parecidas desde una matriz de faceId o un faceListId.</span><span class="sxs-lookup"><span data-stu-id="01bfe-116">Given query face's faceId, find the similar-looking faces from a faceId array or a faceListId.</span></span>
  syntax:
    content: 'function findSimilar(faceId: string, options: Object, callback: ServiceCallback<SimilarFaceResult[]>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.SimilarFaceResult[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.SimilarFaceResult[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.findSimilarWithHttpOperationResponse
  name: findSimilarWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-117">A partir de faceId de cara consultada, encuentra las caras parecidas desde una matriz de faceId o un faceListId.</span><span class="sxs-lookup"><span data-stu-id="01bfe-117">Given query face's faceId, find the similar-looking faces from a faceId array or a faceListId.</span></span>
  syntax:
    content: 'function findSimilarWithHttpOperationResponse(faceId: string, options?: Object)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="01bfe-118">FaceId de la cara de la consulta.</span><span class="sxs-lookup"><span data-stu-id="01bfe-118">FaceId of the query face.</span></span> <span data-ttu-id="01bfe-119">Usuario debe llamar a Face: detectar primero para obtener un faceId válido.</span><span class="sxs-lookup"><span data-stu-id="01bfe-119">User needs to call Face - Detect first to get a valid faceId.</span></span> <span data-ttu-id="01bfe-120">Tenga en cuenta que este faceId no se conserva y expirará en 24 horas después de la llamada de detección</span><span class="sxs-lookup"><span data-stu-id="01bfe-120">Note that this faceId is not persisted and will expire 24 hours after the detection call</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.SimilarFaceResult[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.group
  name: group
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-121">Dividir las caras de candidato en grupos en función de similitud de cara.</span><span class="sxs-lookup"><span data-stu-id="01bfe-121">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function group(faceIds: string[], options?: Object)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="01bfe-122">Matriz de candidato faceId creado por cara: detectar.</span><span class="sxs-lookup"><span data-stu-id="01bfe-122">Array of candidate faceId created by Face - Detect.</span></span>

        <span data-ttu-id="01bfe-123">El valor máximo es 1000 caras</span><span class="sxs-lookup"><span data-stu-id="01bfe-123">The maximum is 1000 faces</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.GroupResponse>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.group_1
  name: group
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-124">Dividir las caras de candidato en grupos en función de similitud de cara.</span><span class="sxs-lookup"><span data-stu-id="01bfe-124">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function group(faceIds: string[], callback: ServiceCallback<GroupResponse>)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.GroupResponse>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.GroupResponse>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.group_2
  name: group
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-125">Dividir las caras de candidato en grupos en función de similitud de cara.</span><span class="sxs-lookup"><span data-stu-id="01bfe-125">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function group(faceIds: string[], options: Object, callback: ServiceCallback<GroupResponse>)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.GroupResponse>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.GroupResponse>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.groupWithHttpOperationResponse
  name: groupWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-126">Dividir las caras de candidato en grupos en función de similitud de cara.</span><span class="sxs-lookup"><span data-stu-id="01bfe-126">Divide candidate faces into groups based on face similarity.</span></span>
  syntax:
    content: 'function groupWithHttpOperationResponse(faceIds: string[], options?: Object)'
    parameters:
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="01bfe-127">Matriz de candidato faceId creado por cara: detectar.</span><span class="sxs-lookup"><span data-stu-id="01bfe-127">Array of candidate faceId created by Face - Detect.</span></span>

        <span data-ttu-id="01bfe-128">El valor máximo es 1000 caras</span><span class="sxs-lookup"><span data-stu-id="01bfe-128">The maximum is 1000 faces</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.GroupResponse>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identify_1
  name: identify
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-129">Identifique caras desconocidas de un grupo de persona.</span><span class="sxs-lookup"><span data-stu-id="01bfe-129">Identify unknown faces from a person group.</span></span>
  syntax:
    content: 'function identify(personGroupId: string, faceIds: string[], callback: ServiceCallback<IdentifyResultItem[]>)'
    parameters:
    - id: personGroupId
      type:
      - string
      description: ''
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.IdentifyResultItem[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.IdentifyResultItem[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identify_2
  name: identify
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-130">Identifique caras desconocidas de un grupo de persona.</span><span class="sxs-lookup"><span data-stu-id="01bfe-130">Identify unknown faces from a person group.</span></span>
  syntax:
    content: 'function identify(personGroupId: string, faceIds: string[], options: Object, callback: ServiceCallback<IdentifyResultItem[]>)'
    parameters:
    - id: personGroupId
      type:
      - string
      description: ''
    - id: faceIds
      type:
      - string[]
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.IdentifyResultItem[]>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.IdentifyResultItem[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identify
  name: identify
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-131">Identifique caras desconocidas de un grupo de persona.</span><span class="sxs-lookup"><span data-stu-id="01bfe-131">Identify unknown faces from a person group.</span></span>
  syntax:
    content: 'function identify(personGroupId: string, faceIds: string[], options?: Object)'
    parameters:
    - id: personGroupId
      type:
      - string
      description: >
        <span data-ttu-id="01bfe-132">personGroupId del grupo de persona de destino, creado por PersonGroups.Create</span><span class="sxs-lookup"><span data-stu-id="01bfe-132">personGroupId of the target person group, created by PersonGroups.Create</span></span>
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="01bfe-133">Matriz de candidato faceId creado por cara: detectar.</span><span class="sxs-lookup"><span data-stu-id="01bfe-133">Array of candidate faceId created by Face - Detect.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.IdentifyResultItem[]>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.identifyWithHttpOperationResponse
  name: identifyWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-134">Identifique caras desconocidas de un grupo de persona.</span><span class="sxs-lookup"><span data-stu-id="01bfe-134">Identify unknown faces from a person group.</span></span>
  syntax:
    content: 'function identifyWithHttpOperationResponse(personGroupId: string, faceIds: string[], options?: Object)'
    parameters:
    - id: personGroupId
      type:
      - string
      description: >
        <span data-ttu-id="01bfe-135">personGroupId del grupo de persona de destino, creado por PersonGroups.Create</span><span class="sxs-lookup"><span data-stu-id="01bfe-135">personGroupId of the target person group, created by PersonGroups.Create</span></span>
    - id: faceIds
      type:
      - string[]
      description: >
        <span data-ttu-id="01bfe-136">Matriz de candidato faceId creado por cara: detectar.</span><span class="sxs-lookup"><span data-stu-id="01bfe-136">Array of candidate faceId created by Face - Detect.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.IdentifyResultItem[]>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verify
  name: verify
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-137">Compruebe si dos caras pertenecen a una misma persona o si una cara pertenece a una persona.</span><span class="sxs-lookup"><span data-stu-id="01bfe-137">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verify(faceId1: string, faceId2: string, options?: Object)'
    parameters:
    - id: faceId1
      type:
      - string
      description: >
        <span data-ttu-id="01bfe-138">faceId de la primera cara, procede de caras: detectar</span><span class="sxs-lookup"><span data-stu-id="01bfe-138">faceId of the first face, comes from Face - Detect</span></span>
    - id: faceId2
      type:
      - string
      description: >
        <span data-ttu-id="01bfe-139">faceId de la cara de la segunda, procede de caras: detectar</span><span class="sxs-lookup"><span data-stu-id="01bfe-139">faceId of the second face, comes from Face - Detect</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verify_1
  name: verify
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-140">Compruebe si dos caras pertenecen a una misma persona o si una cara pertenece a una persona.</span><span class="sxs-lookup"><span data-stu-id="01bfe-140">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verify(faceId1: string, faceId2: string, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId1
      type:
      - string
      description: ''
    - id: faceId2
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verify_2
  name: verify
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-141">Compruebe si dos caras pertenecen a una misma persona o si una cara pertenece a una persona.</span><span class="sxs-lookup"><span data-stu-id="01bfe-141">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verify(faceId1: string, faceId2: string, options: Object, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId1
      type:
      - string
      description: ''
    - id: faceId2
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyWithHttpOperationResponse
  name: verifyWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-142">Compruebe si dos caras pertenecen a una misma persona o si una cara pertenece a una persona.</span><span class="sxs-lookup"><span data-stu-id="01bfe-142">Verify whether two faces belong to a same person or whether one face belongs to a person.</span></span>
  syntax:
    content: 'function verifyWithHttpOperationResponse(faceId1: string, faceId2: string, options?: Object)'
    parameters:
    - id: faceId1
      type:
      - string
      description: >
        <span data-ttu-id="01bfe-143">faceId de la primera cara, procede de caras: detectar</span><span class="sxs-lookup"><span data-stu-id="01bfe-143">faceId of the first face, comes from Face - Detect</span></span>
    - id: faceId2
      type:
      - string
      description: >
        <span data-ttu-id="01bfe-144">faceId de la cara de la segunda, procede de caras: detectar</span><span class="sxs-lookup"><span data-stu-id="01bfe-144">faceId of the second face, comes from Face - Detect</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.VerifyResult>>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyWithPersonGroup
  name: verifyWithPersonGroup
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-145">Compruebe si las dos caras pertenecen a una misma persona.</span><span class="sxs-lookup"><span data-stu-id="01bfe-145">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="01bfe-146">Compara una cara Id con un Id. de persona</span><span class="sxs-lookup"><span data-stu-id="01bfe-146">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyWithPersonGroup(faceId: string, personId: string, personGroupId: string, options?: Object)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="01bfe-147">faceId la cara, procede de caras: detectar</span><span class="sxs-lookup"><span data-stu-id="01bfe-147">faceId the face, comes from Face - Detect</span></span>
    - id: personId
      type:
      - string
      description: >
        <span data-ttu-id="01bfe-148">Especificar a una determinada persona en un grupo de persona.</span><span class="sxs-lookup"><span data-stu-id="01bfe-148">Specify a certain person in a person group.</span></span>

        <span data-ttu-id="01bfe-149">personId se crea en Persons.Create.</span><span class="sxs-lookup"><span data-stu-id="01bfe-149">personId is created in Persons.Create.</span></span>
    - id: personGroupId
      type:
      - string
      description: >
        <span data-ttu-id="01bfe-150">Uso de personGroupId y personId existentes para la carga rápida de una persona especificada.</span><span class="sxs-lookup"><span data-stu-id="01bfe-150">Using existing personGroupId and personId for fast loading a specified person.</span></span> <span data-ttu-id="01bfe-151">personGroupId se crea en persona Groups.Create.</span><span class="sxs-lookup"><span data-stu-id="01bfe-151">personGroupId is created in Person Groups.Create.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyWithPersonGroup_1
  name: verifyWithPersonGroup
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-152">Compruebe si las dos caras pertenecen a una misma persona.</span><span class="sxs-lookup"><span data-stu-id="01bfe-152">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="01bfe-153">Compara una cara Id con un Id. de persona</span><span class="sxs-lookup"><span data-stu-id="01bfe-153">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyWithPersonGroup(faceId: string, personId: string, personGroupId: string, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: personId
      type:
      - string
      description: ''
    - id: personGroupId
      type:
      - string
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyWithPersonGroup_2
  name: verifyWithPersonGroup
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-154">Compruebe si las dos caras pertenecen a una misma persona.</span><span class="sxs-lookup"><span data-stu-id="01bfe-154">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="01bfe-155">Compara una cara Id con un Id. de persona</span><span class="sxs-lookup"><span data-stu-id="01bfe-155">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyWithPersonGroup(faceId: string, personId: string, personGroupId: string, options: Object, callback: ServiceCallback<VerifyResult>)'
    parameters:
    - id: faceId
      type:
      - string
      description: ''
    - id: personId
      type:
      - string
      description: ''
    - id: personGroupId
      type:
      - string
      description: ''
    - id: options
      type:
      - Object
      description: ''
    - id: callback
      type:
      - ServiceCallback<azure-cognitiveservices-face.VerifyResult>
      description: ''
    return:
      type:
      - Promise<azure-cognitiveservices-face.VerifyResult>
  package: azure-cognitiveservices-face
- uid: azure-cognitiveservices-face.Face.verifyWithPersonGroupWithHttpOperationResponse
  name: verifyWithPersonGroupWithHttpOperationResponse
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="01bfe-156">Compruebe si las dos caras pertenecen a una misma persona.</span><span class="sxs-lookup"><span data-stu-id="01bfe-156">Verify whether two faces belong to a same person.</span></span> <span data-ttu-id="01bfe-157">Compara una cara Id con un Id. de persona</span><span class="sxs-lookup"><span data-stu-id="01bfe-157">Compares a face Id with a Person Id</span></span>
  syntax:
    content: 'function verifyWithPersonGroupWithHttpOperationResponse(faceId: string, personId: string, personGroupId: string, options?: Object)'
    parameters:
    - id: faceId
      type:
      - string
      description: >
        <span data-ttu-id="01bfe-158">faceId la cara, procede de caras: detectar</span><span class="sxs-lookup"><span data-stu-id="01bfe-158">faceId the face, comes from Face - Detect</span></span>
    - id: personId
      type:
      - string
      description: >
        <span data-ttu-id="01bfe-159">Especificar a una determinada persona en un grupo de persona.</span><span class="sxs-lookup"><span data-stu-id="01bfe-159">Specify a certain person in a person group.</span></span>

        <span data-ttu-id="01bfe-160">personId se crea en Persons.Create.</span><span class="sxs-lookup"><span data-stu-id="01bfe-160">personId is created in Persons.Create.</span></span>
    - id: personGroupId
      type:
      - string
      description: >
        <span data-ttu-id="01bfe-161">Uso de personGroupId y personId existentes para la carga rápida de una persona especificada.</span><span class="sxs-lookup"><span data-stu-id="01bfe-161">Using existing personGroupId and personId for fast loading a specified person.</span></span> <span data-ttu-id="01bfe-162">personGroupId se crea en persona Groups.Create.</span><span class="sxs-lookup"><span data-stu-id="01bfe-162">personGroupId is created in Person Groups.Create.</span></span>
    - id: options
      type:
      - Object
      description: ''
      optional: true
    return:
      type:
      - Promise<HttpOperationResponse<azure-cognitiveservices-face.VerifyResult>>
  package: azure-cognitiveservices-face
references:
- uid: Promise<azure-cognitiveservices-face.DetectedFace[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: DetectedFace
    fullName: DetectedFace
    uid: azure-cognitiveservices-face.DetectedFace
  - name: '[]>'
    fullName: '[]>'
- uid: ServiceCallback<azure-cognitiveservices-face.DetectedFace[]>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: DetectedFace
    fullName: DetectedFace
    uid: azure-cognitiveservices-face.DetectedFace
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.DetectedFace[]>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: DetectedFace
    fullName: DetectedFace
    uid: azure-cognitiveservices-face.DetectedFace
  - name: '[]>>'
    fullName: '[]>>'
- uid: Promise<azure-cognitiveservices-face.SimilarFaceResult[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: SimilarFaceResult
    fullName: SimilarFaceResult
    uid: azure-cognitiveservices-face.SimilarFaceResult
  - name: '[]>'
    fullName: '[]>'
- uid: ServiceCallback<azure-cognitiveservices-face.SimilarFaceResult[]>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: SimilarFaceResult
    fullName: SimilarFaceResult
    uid: azure-cognitiveservices-face.SimilarFaceResult
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.SimilarFaceResult[]>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: SimilarFaceResult
    fullName: SimilarFaceResult
    uid: azure-cognitiveservices-face.SimilarFaceResult
  - name: '[]>>'
    fullName: '[]>>'
- uid: Promise<azure-cognitiveservices-face.GroupResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: GroupResponse
    fullName: GroupResponse
    uid: azure-cognitiveservices-face.GroupResponse
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-cognitiveservices-face.GroupResponse>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: GroupResponse
    fullName: GroupResponse
    uid: azure-cognitiveservices-face.GroupResponse
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.GroupResponse>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: GroupResponse
    fullName: GroupResponse
    uid: azure-cognitiveservices-face.GroupResponse
  - name: '>>'
    fullName: '>>'
- uid: Promise<azure-cognitiveservices-face.IdentifyResultItem[]>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: IdentifyResultItem
    fullName: IdentifyResultItem
    uid: azure-cognitiveservices-face.IdentifyResultItem
  - name: '[]>'
    fullName: '[]>'
- uid: ServiceCallback<azure-cognitiveservices-face.IdentifyResultItem[]>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: IdentifyResultItem
    fullName: IdentifyResultItem
    uid: azure-cognitiveservices-face.IdentifyResultItem
  - name: '[]>'
    fullName: '[]>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.IdentifyResultItem[]>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: IdentifyResultItem
    fullName: IdentifyResultItem
    uid: azure-cognitiveservices-face.IdentifyResultItem
  - name: '[]>>'
    fullName: '[]>>'
- uid: Promise<azure-cognitiveservices-face.VerifyResult>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: VerifyResult
    fullName: VerifyResult
    uid: azure-cognitiveservices-face.VerifyResult
  - name: '>'
    fullName: '>'
- uid: ServiceCallback<azure-cognitiveservices-face.VerifyResult>
  spec.typeScript:
  - name: ServiceCallback<
    fullName: ServiceCallback<
  - name: VerifyResult
    fullName: VerifyResult
    uid: azure-cognitiveservices-face.VerifyResult
  - name: '>'
    fullName: '>'
- uid: Promise<HttpOperationResponse<azure-cognitiveservices-face.VerifyResult>>
  spec.typeScript:
  - name: Promise<HttpOperationResponse<
    fullName: Promise<HttpOperationResponse<
  - name: VerifyResult
    fullName: VerifyResult
    uid: azure-cognitiveservices-face.VerifyResult
  - name: '>>'
    fullName: '>>'
